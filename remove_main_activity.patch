Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/TwoFragment.java
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/TwoFragment.java	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/TwoFragment.java	(date 1582219169000)
@@ -1,30 +0,0 @@
-package bobrchess.of.by.belaruschess.fragments;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import bobrchess.of.by.belaruschess.R;
-
-
-public class TwoFragment extends Fragment{
-
-    public TwoFragment() {
-        // Required empty public constructor
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-        // Inflate the layout for this fragment
-        return inflater.inflate(R.layout.fragment_two, container, false);
-    }
-
-}
\ No newline at end of file
Index: app/src/main/java/bobrchess/of/by/belaruschess/handler/BitmapHandler.kt
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/handler/BitmapHandler.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/handler/BitmapHandler.kt	(date 1582219169000)
@@ -1,266 +0,0 @@
-package bobrchess.of.by.belaruschess.handler
-
-import android.app.AlertDialog
-import android.content.Context
-import android.content.res.Resources
-import android.graphics.Bitmap
-import android.graphics.BitmapFactory
-import android.graphics.Canvas
-import android.graphics.drawable.BitmapDrawable
-import android.graphics.drawable.Drawable
-import android.net.Uri
-import android.provider.MediaStore
-import android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory
-import bobrchess.of.by.belaruschess.R
-import com.procrastimax.birthdaybuddy.models.EventTournament
-import java.io.ByteArrayOutputStream
-import java.io.File
-import java.io.FileOutputStream
-
-object BitmapHandler {
-
-    private var bitmapFolder = "Bitmaps"
-
-    private var drawable_map: MutableMap<Int, Bitmap> = emptyMap<Int, Bitmap>().toMutableMap()
-
-    private const val STANDARD_SCALING = 64 * 6
-
-    /**
-     * addDrawable adds a drawable to the drawable_map by reading a bitmap from the storage
-     *
-     * @param id : Int is the index for referencing in the EventHandler MAP not the list
-     * @param uri : Uri
-     * @param context : Context
-     * @param scale : Int
-     * @param readBitmapFromGallery : Boolean, when this boolean is true, it forces the function to read a new bitmap from the gallery files
-     */
-    fun addDrawable(
-        id: Int,
-        uri: Uri,
-        context: Context,
-        scale: Int = STANDARD_SCALING,
-        readBitmapFromGallery: Boolean
-    ): Boolean {
-        var success = true
-
-        //first try to load from files
-        //if this doesn't succeed, then try to read from gallery and save edited bitmap to files
-        if ((checkExistingBitmapInFiles(context, id) != null) && (!readBitmapFromGallery)) {
-            var bitmap = getBitmapFromFile(context, id)
-            if (bitmap != null) {
-                // create circular bitmap from saved squared
-                bitmap = getCircularBitmap(bitmap, context.resources)
-                drawable_map[id] = bitmap
-                return true
-            }
-        } else {
-            try {
-                var bitmap = MediaStore.Images.Media.getBitmap(context.contentResolver, uri)
-                //scale (square bitmap)
-                bitmap = getScaledBitmap(bitmap, scale)
-
-                //if the above succeeded, then save bitmap to files
-                createBitmapFile(context, id, bitmap, 100)
-
-                //round bitmap
-                bitmap = getCircularBitmap(bitmap, context.resources)
-
-                drawable_map[id] = bitmap
-
-                //catch any exception, not nice but mostly like a FileNotFountException, when an image was deleted or moved
-                //when this exception is caught, then delete uri reference in EventDate instance +  inform the user
-            } catch (e: Exception) {
-                e.printStackTrace()
-                val event = EventHandler.getEventToEventIndex(id)
-                if (event is EventTournament) {
-                    event.imageUri = null
-                    EventHandler.changeEventAt(
-                        id,
-                        event,
-                        context,
-                        true
-                    )
-                    removeBitmap(id, context)
-
-                    showMissingImageAlertDialog(context)
-                }
-                success = false
-            }
-        }
-
-        return success
-    }
-
-    fun removeAllDrawables(context: Context) {
-        this.drawable_map.clear()
-        context.getDir(this.bitmapFolder, Context.MODE_PRIVATE)?.deleteRecursively()
-    }
-
-    fun removeBitmap(id: Int, context: Context) {
-        val event = EventHandler.getEventToEventIndex(id)
-        if (event != null) {
-            drawable_map.toMutableMap().remove(id)
-            removeBitmapFromFiles(context, event.eventID)
-        }
-    }
-
-    /**
-     * loadAllDrawables iterates through eventhandler eventlist and loads all drawables into this map
-     */
-    fun loadAllBitmaps(context: Context): Boolean {
-        var success = true
-        for (i in 0 until EventHandler.getList().size) {
-            if (EventHandler.getList()[i] is EventTournament) {
-                if ((EventHandler.getList()[i] as EventTournament).imageUri != null) {
-                    success =
-                        addDrawable(
-                            EventHandler.getList()[i].eventID,
-                            Uri.parse((EventHandler.getList()[i] as EventTournament).imageUri),
-                            context,
-                            readBitmapFromGallery = false
-                        )
-                }
-            }
-        }
-        return success
-    }
-
-    fun getBitmapAt(index: Int): Bitmap? {
-        if (drawable_map.isNotEmpty()) {
-            return drawable_map[index]
-        }
-        return null
-    }
-
-    fun getBitmapFromFile(context: Context, eventID: Int): Bitmap? {
-        return if (checkExistingBitmapInFiles(context, eventID) != null) {
-            val bitmapDir = context.getDir(this.bitmapFolder, Context.MODE_PRIVATE)
-            BitmapFactory.decodeFile(bitmapDir.absolutePath + File.separator.toString() + "$eventID.png")
-        } else {
-            null
-        }
-    }
-
-
-    private fun createBitmapFile(
-        context: Context,
-        eventID: Int,
-        bitmap: Bitmap,
-        compressionRate: Int = 100
-    ): Boolean {
-        val bitmapDir = context.getDir(this.bitmapFolder, Context.MODE_PRIVATE)
-        val outStream = ByteArrayOutputStream()
-        bitmap.compress(Bitmap.CompressFormat.PNG, compressionRate, outStream)
-
-        val bitmapFile = File(bitmapDir.absolutePath + File.separator.toString() + "$eventID.png")
-
-        return try {
-            val fos = FileOutputStream(bitmapFile)
-            fos.write(outStream.toByteArray())
-
-            fos.flush()
-            fos.close()
-
-            true
-        } catch (e: Exception) {
-            e.printStackTrace()
-
-            false
-        }
-    }
-
-    private fun checkExistingBitmapInFiles(context: Context, eventID: Int): File? {
-        context.getDir(this.bitmapFolder, Context.MODE_PRIVATE).let {
-            if (it != null) {
-                val bitmapFile = File(it.absolutePath + File.separator + "$eventID.png")
-                return if (bitmapFile.exists()) {
-                    bitmapFile
-                } else {
-                    null
-                }
-            }
-        }
-        return null
-    }
-
-    private fun removeBitmapFromFiles(context: Context, eventID: Int) {
-        val bitmapFile = checkExistingBitmapInFiles(context, eventID)
-        bitmapFile?.delete()
-    }
-
-    /**
-     * getSquaredBitmap square given bitmap
-     * this is important for nice looking circular images for avatar images
-     */
-    private fun getSquaredBitmap(bitmap: Bitmap): Bitmap {
-        val halfWidth = bitmap.width / 2
-        val halfHeight = bitmap.height / 2
-        if (bitmap.width < bitmap.height) {
-            return Bitmap.createBitmap(
-                bitmap,
-                0,
-                halfHeight - halfWidth,
-                bitmap.width,
-                bitmap.width
-            )
-        } else if (bitmap.width > bitmap.height) {
-            return Bitmap.createBitmap(
-                bitmap,
-                halfWidth - halfHeight,
-                0,
-                bitmap.height,
-                bitmap.height
-            )
-        }
-        return bitmap
-    }
-
-    fun getScaledBitmap(bitmap: Bitmap, scale: Int = STANDARD_SCALING): Bitmap {
-        //first square bitmap
-        val tempBitmap = getSquaredBitmap(bitmap)
-
-        //then scale bitmap
-        return Bitmap.createScaledBitmap(
-            tempBitmap,
-            scale,
-            scale,
-            false
-        )
-    }
-
-    fun getCircularBitmap(bitmap: Bitmap, resources: Resources): Bitmap {
-        RoundedBitmapDrawableFactory.create(resources, bitmap).let {
-            it.isCircular = true
-            return drawableToBitmap(it)
-        }
-    }
-
-    private fun drawableToBitmap(drawable: Drawable): Bitmap {
-        if (drawable is BitmapDrawable) {
-            return drawable.bitmap
-        }
-
-        var width = drawable.intrinsicWidth
-        width = if (width > 0) width else 1
-        var height = drawable.intrinsicHeight
-        height = if (height > 0) height else 1
-
-        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)
-        val canvas = Canvas(bitmap)
-        drawable.setBounds(0, 0, canvas.width, canvas.height)
-        drawable.draw(canvas)
-
-        return bitmap
-    }
-
-    private fun showMissingImageAlertDialog(context: Context) {
-        val builder = AlertDialog.Builder(context)
-        builder.setTitle(R.string.alert_dialog_missing_avatar_img_title)
-        builder.setMessage(R.string.alert_dialog_missing_avatar_img_text)
-        builder.setPositiveButton(android.R.string.ok) { dialog, _ ->
-            dialog.dismiss()
-        }
-        builder.setIcon(R.drawable.ic_error_outline)
-       // builder.show()//todo мб надо удалить это ибо если невалидный урл то падает все
-    }
-}
\ No newline at end of file
Index: app/src/main/java/bobrchess/of/by/belaruschess/handler/EventHandler.kt
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/handler/EventHandler.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/handler/EventHandler.kt	(date 1582219169000)
@@ -1,250 +0,0 @@
-package bobrchess.of.by.belaruschess.handler
-
-import android.content.Context
-import android.net.Uri
-import bobrchess.of.by.belaruschess.model.EventDate
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
-import com.procrastimax.birthdaybuddy.models.EventTournament
-import com.procrastimax.birthdaybuddy.models.MonthDivider
-import com.procrastimax.birthdaybuddy.models.SortIdentifier
-import kotlinx.android.synthetic.main.fragment_event_list.*
-import java.util.*
-
-/**
- * EventHandler singleton object map to store all occurring EventDates (birthdays, anniversaries, etc.)
- * This is useful to compare all objects more easily, f.e. when you want to traverse all entries in event dates
- */
-object EventHandler {
-
-    /**
-     * event_list a list used for sorted viewing of the maps content
-     * the data is stored in pairs of EventDay and the index of this dataset in the map as an int
-     */
-    private var event_list: List<EventDate> = emptyList()
-    private var user_list: List<EventDate> = emptyList()
-
-
-    private var event_map: MutableMap<Int, EventDate> = emptyMap<Int, EventDate>().toMutableMap()
-
-    /**
-     * addEvent adds a EventDay type to the map and has the possibility to write it to the shared preferences after adding it
-     * this orders all events after the startDate automatically
-     * also updates the Eventday list after every adding of a new event
-     * @param event: EventDay
-     * @param context: Context
-     * @param writeAfterAdd: Boolean whether this event should be written to shared preferences after adding to list
-     * @param addNewNotification : Boolean, whether a new notification should be created after adding this event
-     * @param updateEventList : Boolean, whether to update the EventList, updating the EventList means sorting event values by their startDate
-     * @param addBitmap : Boolean whether a new bitmap should be added
-     */
-    fun addEvent(
-            event: EventDate,
-            context: Context,
-            writeAfterAdd: Boolean = true,
-            addNewNotification: Boolean = true,
-            updateEventList: Boolean = true,
-            addBitmap: Boolean = true
-
-    ) {
-
-        if (event !is MonthDivider) {
-            val cal = Calendar.getInstance()
-            cal.time = event.eventDate
-            cal.set(Calendar.HOUR_OF_DAY, 0)
-            cal.set(Calendar.SECOND, 1)
-            event.eventDate = cal.time
-        }
-
-        this.event_map[event.eventID] = event
-
-        if (event is EventTournament && addBitmap) {
-            Thread(Runnable {
-                if (event.imageUri != null) {
-                    BitmapHandler.addDrawable(
-                            event.eventID,
-                            Uri.parse(event.imageUri),
-                            context,
-                            readBitmapFromGallery = false,
-                            //150dp because the app_bar height is 300dp
-                            scale = MainActivity.convertDpToPx(context, 150f)
-                    )
-                }
-                if (context is MainActivity) {
-                    context.runOnUiThread {
-                        if (context.recyclerView != null) {
-                            context.recyclerView.adapter?.notifyDataSetChanged()
-                        }
-                    }
-                }
-            }).start()
-        }
-
-        //set hour of day from all other events except MonthDivider to 12h (month divider is at 0h), so when sorting month divider is always at first
-        if (event !is MonthDivider && addNewNotification) {
-            NotificationHandler.scheduleNotification(context, event)
-        }
-
-        if (updateEventList) {
-            this.event_list = getSortedListBy()
-        }
-
-        if (writeAfterAdd) {
-            IOHandler.writeEventToFile(event.eventID, event)
-        }
-    }
-
-    /**
-     * changeEventAt changes event at key position
-     *
-     * @param ID : Int
-     * @param newEvent : EventDay
-     */
-    fun changeEventAt(
-            ID: Int,
-            newEvent: EventDate,
-            context: Context,
-            writeAfterChange: Boolean = false
-    ) {
-        getEventToEventIndex(ID)?.let { oldEvent ->
-            newEvent.eventID = ID
-            //set hour of day from all other events except monthdivider to 12h (month divider is at 0h), so when sorting month divider is always at first
-            if (newEvent !is MonthDivider) {
-                val cal = Calendar.getInstance()
-                cal.time = newEvent.eventDate
-                cal.set(Calendar.HOUR_OF_DAY, 0)
-                cal.set(Calendar.SECOND, 1)
-                newEvent.eventDate = cal.time
-            }
-
-            NotificationHandler.cancelNotification(context, oldEvent)
-            NotificationHandler.scheduleNotification(context, newEvent)
-
-            this.event_map[ID] = newEvent
-
-            if (newEvent is EventTournament) {
-                if (newEvent.imageUri != null) {
-                    val newEventImageUri = newEvent.imageUri
-                    //remove old drawable if one exists
-                    if ((oldEvent as EventTournament).imageUri != null) {
-                        BitmapHandler.removeBitmap(oldEvent.eventID, context)
-                    }
-                    //force BitmapHandler to load new avatar image from gallery, in case there is already an existant bitmap
-                    BitmapHandler.addDrawable(
-                            ID,
-                            Uri.parse(newEventImageUri),
-                            context,
-                            readBitmapFromGallery = true,
-                            scale = MainActivity.convertDpToPx(context, 150f)
-                    )
-                }
-            }
-            this.event_list = getSortedListBy()
-
-            if (writeAfterChange) {
-                IOHandler.writeEventToFile(ID, newEvent)
-            }
-        }
-    }
-
-    /**
-     * removeEventByKey removes an event from the by using a key
-     *
-     * @param index : Int
-     * @param context : Context
-     * @param writeChange : Boolean
-     */
-    fun removeEventByID(index: Int, context: Context, writeChange: Boolean = false) {
-        getEventToEventIndex(index)?.let { event ->
-
-            if (event is EventTournament) {
-                BitmapHandler.removeBitmap(index, context)
-            }
-
-            NotificationHandler.cancelNotification(context, event)
-
-            if (writeChange) {
-                IOHandler.removeEventFromFile(event.eventID)
-            }
-
-            this.event_map.remove(index)
-            this.event_list = this.getSortedListBy()
-        }
-    }
-
-    fun clearData() {
-        if (this.event_list.isNotEmpty()) {
-            this.event_map.clear()
-            this.event_list = getSortedListBy()
-        }
-    }
-
-    /**
-     * getEventToEventIndex returns the value with type EventDay? to a given integer key
-     * @param index : Int
-     * @return EventDay?
-     */
-    fun getEventToEventIndex(index: Int): EventDate? {
-        if (event_map.containsKey(index))
-            return event_map[index]
-        return null
-    }
-
-    fun deleteAllEntriesAndImages(context: Context, writeAfterAdd: Boolean) {
-        this.event_list.forEach {
-            NotificationHandler.cancelNotification(context, it)
-        }
-        this.clearData()
-        BitmapHandler.removeAllDrawables(context)
-        if (writeAfterAdd) {
-            IOHandler.clearSharedPrefEventData()
-        }
-    }
-
-    /**
-     * containsKey checks if the given key is present in the map
-     *
-     * @param index: Int
-     * @return Boolean
-     */
-    private fun containsIndex(index: Int): Boolean {
-        return event_map.containsKey(index)
-    }
-
-    fun getList(): List<EventDate> {
-        return this.event_list
-    }
-
-    fun getEventsAsStringList(): String {
-        var eventString = ""
-        val tempList = event_list.toMutableList()
-        tempList.forEach {
-            //don't save Monthdividers bc they are created with the first start of the app
-            if (it !is MonthDivider) {
-                //removing avatar image
-                if (it is EventTournament) {
-                    eventString += it.toStringWithoutImage() + "\n"
-                } else {
-                    eventString += it.toString() + "\n"
-                }
-            }
-        }
-        return eventString
-    }
-
-    /**
-     * getSortValueListBy returns the map as a value list which is sorted by specific attributes given by an enum identifier
-     * If the identifier is unknown, than an empty value list is returned
-     *
-     * @param identifier : SortIdentifier
-     * @return List<EventDay>
-     */
-    private fun getSortedListBy(
-            identifier: SortIdentifier = EventDate.Identifier.Date
-    ): List<EventDate> {
-        if (identifier == EventDate.Identifier.Date) {
-            return event_map.values.sorted()
-        } else {
-            return emptyList()
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/bobrchess/of/by/belaruschess/handler/IOHandler.kt
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/handler/IOHandler.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/handler/IOHandler.kt	(date 1582219169000)
@@ -1,589 +0,0 @@
-package bobrchess.of.by.belaruschess.handler
-
-import android.content.Context
-import android.content.SharedPreferences
-import android.os.Environment
-import android.util.Log
-import android.widget.Toast
-import bobrchess.of.by.belaruschess.BuildConfig
-import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.model.EventDate
-import com.procrastimax.birthdaybuddy.models.*
-import java.io.File
-import java.util.*
-
-
-/**
- * DataHandler is a singleton and is used to store/read event data from shared preferences
- * It stores all data in shared preferences and the has to be initialized by getting the main context
- *
- * All events are saved as an key, value pair. In which the key is an integer value and the value is a EventDate
- */
-
-//todo закомментил все тк. пока что отложил сохранение в локальный сторейдж
-object IOHandler {
-
-    object SharedPrefKeys {
-        const val key_firstStart = "isFirstStart"
-
-        //birthday settings
-        const val key_isNotificationOnBirthday = "isNotificationOnBirthday"
-        const val key_isNotificationSoundOnBirthday = "isNotificationSoundOnBirthday"
-        const val key_isNotificationVibrationOnBirthday = "isNotificationVibrationOnBirthday"
-        const val key_strNotificationTimeBirthday = "strNotificationTimeBirthday"
-
-        const val key_isRemindedDay_month_beforeBirthday = "isRemindedDay_month_beforeBirthday"
-        const val key_isRemindedDay_week_beforeBirthday = "isRemindedDay_week_beforeBirthday"
-        const val key_isRemindedDay_day_beforeBirthday = "isRemindedDay_day_beforeBirthday"
-        const val key_isRemindedDay_eventdayBirthday = "isRemindedDay_eventdayBirthday"
-
-        const val key_notificationLightBirthday = "notificationLightBirthday"
-
-        //annual event settings
-        const val key_isNotificationOnAnnual = "isNotificationOnAnnual"
-        const val key_isNotificationSoundOnAnnual = "isNotificationSoundOnAnnual"
-        const val key_isNotificationVibrationOnAnnual = "isNotificationVibrationOnAnnual"
-        const val key_strNotificationTimeAnnual = "strNotificationTimeAnnual"
-
-        const val key_isRemindedDay_month_beforeAnnual = "isRemindedDay_month_beforeAnnual"
-        const val key_isRemindedDay_week_beforeAnnual = "isRemindedDay_week_beforeAnnual"
-        const val key_isRemindedDay_day_beforeAnnual = "isRemindedDay_day_beforeAnnual"
-        const val key_isRemindedDay_eventdayAnnual = "isRemindedDay_eventdayAnnual"
-
-        const val key_notificationLightAnnual = "notificationLightAnnual"
-
-        // one time event settings
-        const val key_isNotificationOnOneTime = "isNotificationOnOneTime"
-        const val key_isNotificationSoundOnOneTime = "isNotificationSoundOnOneTime"
-        const val key_isNotificationVibrationOnOneTime = "isNotificationVibrationOnOneTime"
-        const val key_strNotificationTimeOneTime = "strNotificationTimeOneTime"
-
-        const val key_isRemindedDay_month_beforeOneTime = "isRemindedDay_month_beforeOneTime"
-        const val key_isRemindedDay_week_beforeOneTime = "isRemindedDay_week_beforeOneTime"
-        const val key_isRemindedDay_day_beforeOneTime = "isRemindedDay_day_beforeOneTime"
-        const val key_isRemindedDay_eventdayOneTime = "isRemindedDay_eventdayOneTime"
-
-        const val key_notificationLightOneTime = "notificationLightOneTime"
-
-        // extra settings
-        const val key_date_as_calendar_view = "dateAsCalendarView"
-    }
-
-    //Filename of shared preference to store event data and settings data
-    private const val fileNameEventData = BuildConfig.APPLICATION_ID + ".EventData"
-    private const val fileNameSettings = BuildConfig.APPLICATION_ID + ".Settings"
-
-    private lateinit var sharedPrefEventData: SharedPreferences
-    private lateinit var sharedPrefSettings: SharedPreferences
-
-    const val tournamentDivider_properties = "||"
-    const val tournamentDivider_values = "::"
-
-    /**
-     * registerIO has to be called before any io writing/reading is done
-     * This function has to get the main context to use shared preferences
-     *
-     * @param context : Context
-     */
-    fun registerIO(context: Context) {
-        sharedPrefEventData = context.getSharedPreferences(fileNameEventData, Context.MODE_PRIVATE)
-        sharedPrefSettings = context.getSharedPreferences(fileNameSettings, Context.MODE_PRIVATE)
-    }
-
-    fun initializeAllSettings() {
-        //notifications on
-        writeSetting(SharedPrefKeys.key_isNotificationOnBirthday, true)
-        writeSetting(SharedPrefKeys.key_isNotificationOnAnnual, true)
-        writeSetting(SharedPrefKeys.key_isNotificationOnOneTime, true)
-
-        //notification sound off
-        writeSetting(SharedPrefKeys.key_isNotificationSoundOnBirthday, false)
-        writeSetting(SharedPrefKeys.key_isNotificationSoundOnAnnual, false)
-        writeSetting(SharedPrefKeys.key_isNotificationSoundOnOneTime, false)
-
-        //notification vibration on
-        writeSetting(SharedPrefKeys.key_isNotificationVibrationOnBirthday, true)
-        writeSetting(SharedPrefKeys.key_isNotificationVibrationOnAnnual, true)
-        writeSetting(SharedPrefKeys.key_isNotificationVibrationOnOneTime, true)
-
-        //notification time to 12:00
-        writeSetting(SharedPrefKeys.key_strNotificationTimeBirthday, "12:00")
-        writeSetting(SharedPrefKeys.key_strNotificationTimeAnnual, "12:00")
-        writeSetting(SharedPrefKeys.key_strNotificationTimeOneTime, "12:00")
-
-        //notification reminder days
-        writeSetting(SharedPrefKeys.key_isRemindedDay_month_beforeBirthday, true)
-        writeSetting(SharedPrefKeys.key_isRemindedDay_week_beforeBirthday, true)
-        writeSetting(SharedPrefKeys.key_isRemindedDay_day_beforeBirthday, true)
-        writeSetting(SharedPrefKeys.key_isRemindedDay_eventdayBirthday, true)
-
-        writeSetting(SharedPrefKeys.key_isRemindedDay_month_beforeAnnual, true)
-        writeSetting(SharedPrefKeys.key_isRemindedDay_week_beforeAnnual, true)
-        writeSetting(SharedPrefKeys.key_isRemindedDay_day_beforeAnnual, true)
-        writeSetting(SharedPrefKeys.key_isRemindedDay_eventdayAnnual, true)
-
-        writeSetting(SharedPrefKeys.key_isRemindedDay_month_beforeOneTime, true)
-        writeSetting(SharedPrefKeys.key_isRemindedDay_week_beforeOneTime, true)
-        writeSetting(SharedPrefKeys.key_isRemindedDay_day_beforeOneTime, true)
-        writeSetting(SharedPrefKeys.key_isRemindedDay_eventdayOneTime, true)
-
-        //notification lights to 1
-        writeSetting(SharedPrefKeys.key_notificationLightBirthday, 1)
-        writeSetting(SharedPrefKeys.key_notificationLightAnnual, 1)
-        writeSetting(SharedPrefKeys.key_notificationLightOneTime, 1)
-
-        // use a calendarview for setting the startDate of events, standard (true)
-        writeSetting(SharedPrefKeys.key_date_as_calendar_view, true)
-    }
-
-    private fun settingsContainsKey(key: String): Boolean {
-        return (sharedPrefSettings.contains(key))
-    }
-
-    fun <T> writeSetting(key: String, value: T) {
-        //only try to write when the type matches
-        val editor = sharedPrefSettings.edit()
-        when (value) {
-            is String -> {
-                editor.putString(key, value as String)
-            }
-            is Boolean -> {
-                editor.putBoolean(key, value as Boolean)
-            }
-            is Int -> {
-                editor.putInt(key, value as Int)
-            }
-            is Float -> {
-                editor.putFloat(key, value as Float)
-            }
-        }
-        editor.apply()
-    }
-
-    fun getStringFromKey(key: String): String? {
-        return if (::sharedPrefSettings.isInitialized) {
-            sharedPrefSettings.getString(key, null)
-        } else null
-    }
-
-    fun getIntFromKey(key: String): Int? {
-        return if (settingsContainsKey(key)) {
-            sharedPrefSettings.getInt(key, -1)
-        } else {
-            null
-        }
-    }
-
-    fun getBooleanFromKey(key: String): Boolean? {
-        return if (settingsContainsKey(key)) {
-            sharedPrefSettings.getBoolean(key, false)
-        } else {
-            if (key == SharedPrefKeys.key_date_as_calendar_view) {
-                writeSetting(key, true)
-                return true
-            }
-            null
-        }
-    }
-
-    fun isFirstStart(): Boolean {
-        //when the key doesn't exist -> its the first start, so we have to invert the contains function
-        return if (!settingsContainsKey(SharedPrefKeys.key_firstStart)) {
-            Log.i("IOHandler", "shared pref files didn't exist before")
-            val sharedPrefEditor = sharedPrefSettings.edit()
-            //change key value to false bc its not the first start anymore
-            //initialize first export/import with true
-            sharedPrefEditor.putBoolean(SharedPrefKeys.key_firstStart, false)
-            sharedPrefEditor.apply()
-            true
-        } else false
-    }
-
-    /**
-     * writeEventToFile writes a single event with a key to the shared preferences
-     * @param key : Int
-     * @param event : EventDay
-     */
-    fun writeEventToFile(key: Int, event: EventDate) {
-        val sharedPrefEditor = sharedPrefEventData.edit()
-        sharedPrefEditor.putString(key.toString(), event.toString())
-        sharedPrefEditor.apply()
-    }
-
-    /**
-     * removeEventFromFile removes an entry fro the shared preferences by using the key
-     * @param key : Int
-     */
-    fun removeEventFromFile(key: Int) {
-        val sharedPrefEditor = sharedPrefEventData.edit()
-        sharedPrefEditor.remove(key.toString())
-        sharedPrefEditor.apply()
-    }
-
-    fun clearSharedPrefEventData() {
-        val sharedPrefEdit = sharedPrefEventData.edit()
-        sharedPrefEdit.clear()
-        sharedPrefEdit.apply()
-    }
-
-    /**
-     * getHighestIndex returns the max index value of shared pref keys
-     */
-    fun getHighestIndex(): Int {
-        var highest = 0
-        if (::sharedPrefEventData.isInitialized) {
-            sharedPrefEventData.all.keys.forEach {
-                if (it.toInt() > highest) {
-                    highest = it.toInt()
-                }
-            }
-        }
-        return highest
-    }
-
-    /**
-     * readAll reads all shared preferences and returns them as a Map<Int, EventDay>
-     *
-     * @return Map<Int, EventDay>
-     */
-    fun readAll(context: Context) {
-        var eventCounter = 0
-        sharedPrefEventData.all.forEach {
-            if (!isFirstStart()) {
-                if (it.value is String) {
-                    eventCounter++
-                    var event =
-                        convertStringToEventDate(context, it.value as String)
-                    event!!.eventID = it.key.toInt()
-
-                    //check for onetimeevents
-                    if (event is OneTimeEvent) {
-                        //when onetimeevent expired, remove from shared prefs and null it, so it doesnt get added in the map
-                        if (event.dateIsExpired()) {
-                            sharedPrefEventData.edit().remove(it.key).apply()
-                            event = null
-                        }
-                    }
-                    if (event != null) {
-                        //when iterator is last element, add new element and update eventlist
-                        if (eventCounter == sharedPrefEventData.all.size) {
-                            EventHandler.addEvent(
-                                event,
-                                context,
-                                writeAfterAdd = false,
-                                addNewNotification = false,
-                                updateEventList = true,
-                                addBitmap = false
-                            )
-                        } else {
-                            EventHandler.addEvent(
-                                event,
-                                context,
-                                writeAfterAdd = false,
-                                addNewNotification = false,
-                                updateEventList = false,
-                                addBitmap = false
-                            )
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    /**
-     * convertStringToEventDay reads an string and returns a object of base class EventDay
-     * It can return derived types from EventDay with the typification string at the start of every string
-     * @param context : Context
-     * @param objectString : String
-     * @return EventDay?
-     */
-    fun convertStringToEventDate(context: Context, objectString: String): EventDate? {
-        objectString.split(tournamentDivider_properties).let { stringArray ->
-            if (stringArray.isNotEmpty()) {
-                when (stringArray[0]) {
-                    //BIRTHDAY EVENT PARSING-
-                    (EventTournament.Name) -> {
-                        var forename = "-"
-                        var startDate = "-"
-                        var finishDate = "-"
-                        var avatarImageURI: String? = null
-                        var shortDescription: String? = null
-                        var fullDescription: String? = null
-                        var refereeId: String? = null
-                        var placeId: String? = null
-
-                        for (i in 1 until stringArray.size) {
-                            val property = stringArray[i].split(tournamentDivider_values)
-
-                            //use identifier
-                            when (property[0]) {
-                                EventTournament.Identifier.StartDate.toString() -> {
-                                    startDate = property[1]
-                                }
-                                EventTournament.Identifier.FinishDate.toString() -> {
-                                    finishDate = property[1]
-                                }
-                                EventTournament.Identifier.Name.toString() -> {
-                                    forename = property[1]
-                                }
-                                EventTournament.Identifier.ShortDescription.toString() -> {
-                                    shortDescription = property[1]
-                                }
-                                EventTournament.Identifier.FullDescription.toString() -> {
-                                    fullDescription = property[1]
-                                }
-                                EventTournament.Identifier.AvatarUri.toString() -> {
-                                    avatarImageURI = property[1]
-                                }
-                                EventTournament.Identifier.Referee.toString() -> {
-                                    refereeId = property[1]
-                                }
-                                EventTournament.Identifier.Place.toString() -> {
-                                    placeId = property[1]
-                                }
-                                else ->
-                                    Log.w(
-                                        "IOHandler",
-                                        "Could not find identifier when trying to parse EventTournament"
-                                    )
-                            }
-                        }
-                        val tournament =
-                            EventTournament(
-                                    2222,
-                                EventDate.parseStringToDate(startDate, locale = Locale.GERMAN),//todo why?
-                                forename
-                            )
-                     //   if (shortDescription != null) birthday.fini = shortDescription
-                        if (shortDescription != null) tournament.shortDescription = shortDescription
-                      //  if (note != null) birthday.note = note
-                        if (avatarImageURI != null) tournament.imageUri = avatarImageURI
-                        if (fullDescription != null) tournament.fullDescription = fullDescription
-                        if (refereeId != null) tournament.refereeId = refereeId.toLong()
-                        if (placeId != null) {
-                            tournament.placeId = placeId.toInt()
-                        }
-                        tournament.finishDate = EventDate.parseStringToDate(finishDate, locale = Locale.GERMAN)
-                        return tournament
-                    }
-                    //ANNUAL EVENT PARSING
-                   /* (AnnualEvent.Name) -> {
-                        var startDate = "-"
-                        var name = "-"
-                        var note: String? = null
-                        var hasStartYear = false
-
-                        for (i in 1 until stringArray.size) {
-                            val property = stringArray[i].split(tournamentDivider_values)
-
-                            //use identifier
-                            when (property[0]) {
-                                AnnualEvent.Identifier.StartDate.toString() -> {
-                                    startDate = property[1]
-                                }
-                                AnnualEvent.Identifier.Name.toString() -> {
-                                    name = property[1]
-                                }
-                                AnnualEvent.Identifier.HasStartYear.toString() -> {
-                                    hasStartYear = property[1].toBoolean()
-                                }
-                                AnnualEvent.Identifier.Note.toString() -> {
-                                    note = property[1]
-                                }
-                                else ->
-                                    Log.w(
-                                        "IOHandler",
-                                        "Could not find identifier when trying to parse AnnualEvent"
-                                    )
-                            }
-                        }
-                        val anniversary =
-                            AnnualEvent(
-                                EventDate.parseStringToDate(startDate, locale = Locale.GERMAN),
-                                name,
-                                hasStartYear
-                            )
-                        if (note != null) {
-                            anniversary.note = note
-                        }
-                        return anniversary
-                    }*/
-                    //ONETIME EVENT PARSING
-                    (OneTimeEvent.Name) -> {
-                        var date = "-"
-                        var name = "-"
-                        var note: String? = null
-
-                        for (i in 1 until stringArray.size) {
-                            val property = stringArray[i].split(tournamentDivider_values)
-
-                            //use identifier
-                            when (property[0]) {
-                                OneTimeEvent.Identifier.Date.toString() -> {
-                                    date = property[1]
-                                }
-                                OneTimeEvent.Identifier.Name.toString() -> {
-                                    name = property[1]
-                                }
-                                OneTimeEvent.Identifier.Note.toString() -> {
-                                    note = property[1]
-                                }
-                                else ->
-                                    Log.w(
-                                        "IOHandler",
-                                        "Could not find identifier when trying to parse OneTimeEvent"
-                                    )
-                            }
-                        }
-                        val oneTimeEvent = OneTimeEvent(
-                            EventDate.parseStringToDate(date, locale = Locale.GERMAN),
-                            name
-                        )
-                        if (note != null) {
-                            oneTimeEvent.note = note
-                        }
-                        return oneTimeEvent
-                    }
-                    //MONTHDIVIDER EVENT PARSING
-                    (MonthDivider.Name) -> {
-                        var date = "-"
-                        var month = "-"
-
-                        for (i in 1 until stringArray.size) {
-                            val property = stringArray[i].split(tournamentDivider_values)
-
-                            //use identifier
-                            when (property[0]) {
-                                MonthDivider.Identifier.Date.toString() -> {
-                                    date = property[1]
-                                }
-                                MonthDivider.Identifier.MonthName.toString() -> {
-                                    val cal = Calendar.getInstance()
-                                    cal.time =
-                                        EventDate.parseStringToDate(date, locale = Locale.GERMAN)
-                                    month =
-                                        context.resources.getStringArray(R.array.month_names)[cal.get(
-                                            Calendar.MONTH
-                                        )]
-                                }
-                                else ->
-                                    Log.w(
-                                        "IOHandler",
-                                        "Could not find identifier when trying to parse EventMonthDivider"
-                                    )
-                            }
-                        }
-                        return MonthDivider(
-                            EventDate.parseStringToDate(
-                                date,
-                                locale = Locale.GERMAN
-                            ), month
-                        )
-                    }
-                    else -> {
-                        return null
-                    }
-                }
-            } else {
-                return null
-            }
-        }
-    }
-
-    fun writeAllEventsToExternalStorage(context: Context): Boolean {
-        if (EventHandler.getList().isNotEmpty()) {
-            //check if external storage is available for reading and writing
-            if (Environment.getExternalStorageState() == Environment.MEDIA_MOUNTED) {
-                val storagePath =
-                    File(
-                        Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),
-                        "birthdaybuddy"
-                    )
-
-                //when folder creating did not succeed
-                if (!storagePath.mkdirs() && !storagePath.exists()) {
-                    Log.e("IOHANDLER", "Directory not created")
-                    Toast.makeText(
-                        context,
-                        R.string.permissions_toast_export_error,
-                        Toast.LENGTH_LONG
-                    ).show()
-                    return false
-                } else {
-                    val savedData = File(storagePath.absolutePath + "/events.txt")
-                    if (savedData.exists()) {
-                        savedData.delete()
-                    }
-                    savedData.createNewFile()
-                    savedData.writeText(EventHandler.getEventsAsStringList().apply {
-                        println(this)
-                    })
-                    return true
-                }
-            } else {
-                Toast.makeText(context, R.string.permissions_toast_no_sd, Toast.LENGTH_LONG).show()
-                return false
-            }
-        }
-        return false
-    }
-
-    fun importEventsFromExternalStorage(context: Context): Boolean {
-        //check if external storage is available for reading
-        if (Environment.getExternalStorageState() == Environment.MEDIA_MOUNTED) {
-            val storagePath = File(
-                Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),
-                "birthdaybuddy"
-            )
-            //when folder finding did not succeed
-            if (!storagePath.exists()) {
-                Log.e("IOHANDLER", "Directory not existent/ readable")
-                Toast.makeText(context, R.string.permissions_toast_import_error, Toast.LENGTH_LONG)
-                    .show()
-                return false
-            } else {
-                try {
-                    val data = File(storagePath.absolutePath + "/events.txt")
-                    data.readLines().apply {
-                        this.forEach {
-                            convertStringToEventDate(context, it).let { event ->
-                                if (event != null) {
-
-                                    //only add onetimevents which are not expired
-                                    if (!(event is OneTimeEvent && event.dateIsExpired())) {
-                                        EventHandler.addEvent(
-                                            event,
-                                            context,
-                                            writeAfterAdd = true,
-                                            addNewNotification = true,
-                                            //only update EventList sorting when last line reached
-                                            updateEventList = (it == this.last())
-                                        )
-                                    }
-                                }
-                            }
-                        }
-                    }
-                } catch (e: Exception) {
-                    Log.e("IOHANDLER", e.localizedMessage)
-                    Toast.makeText(
-                        context,
-                        R.string.permissions_toast_import_error,
-                        Toast.LENGTH_LONG
-                    ).show()
-                    Toast.makeText(context, R.string.error_retry_save_file, Toast.LENGTH_LONG)
-                        .show()
-
-                    // try again writing all current events
-                    writeAllEventsToExternalStorage(context)
-                    return false
-                }
-                return true
-            }
-        } else {
-            Toast.makeText(context, R.string.permissions_toast_no_sd, Toast.LENGTH_LONG).show()
-            return false
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/MainActivity.kt
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/MainActivity.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/MainActivity.kt	(date 1582219169000)
@@ -1,378 +0,0 @@
-
-package bobrchess.of.by.belaruschess.view.activity.impl
-
-import android.app.ProgressDialog
-import android.content.Context
-import android.content.Intent
-import android.content.pm.PackageManager
-import android.os.Bundle
-import android.support.design.widget.AppBarLayout
-import android.support.design.widget.CoordinatorLayout
-import android.support.v4.app.Fragment
-import android.util.TypedValue
-import android.widget.Toast
-import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.dto.TournamentDTO
-import bobrchess.of.by.belaruschess.fragments.ShowTournamentEvent
-import bobrchess.of.by.belaruschess.handler.BitmapHandler
-import bobrchess.of.by.belaruschess.handler.EventHandler
-import bobrchess.of.by.belaruschess.handler.IOHandler
-import bobrchess.of.by.belaruschess.model.EventDate
-import bobrchess.of.by.belaruschess.presenter.SearchTournamentPresenter
-import bobrchess.of.by.belaruschess.presenter.impl.SearchTournamentPresenterImpl
-import bobrchess.of.by.belaruschess.util.Constants
-import bobrchess.of.by.belaruschess.view.activity.SearchTournamentContractView
-import com.procrastimax.birthdaybuddy.fragments.*
-import com.procrastimax.birthdaybuddy.models.EventTournament
-import com.procrastimax.birthdaybuddy.models.MonthDivider
-import com.procrastimax.birthdaybuddy.models.OneTimeEvent
-import kotlinx.android.synthetic.main.activity_main.*
-import kotlinx.android.synthetic.main.fragment_event_list.*
-import java.text.DateFormat
-import java.text.SimpleDateFormat
-import java.util.*
-
-class MainActivity : AbstractActivity(), SearchTournamentContractView {
-
-    private var searchTournamentPresenter: SearchTournamentPresenter? = null
-    private var progressDialog: ProgressDialog? = null
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_main)
-        setSupportActionBar(toolbar)
-
-        searchTournamentPresenter = SearchTournamentPresenterImpl()
-        searchTournamentPresenter!!.attachView(this)
-        searchTournamentPresenter!!.viewIsReady()
-
-        EventHandler.clearData()
-        IOHandler.registerIO(this)
-        lockAppbar()
-
-
-        if (!IOHandler.isFirstStart()) {
-            //read all data from shared prefs, when app didnt start for the first time
-            //IOHandler.clearSharedPrefEventData()
-            loadTournamentsFromLocalStorage()
-           // loadTournaments()
-        } else {
-            //on first start write standard settings to shared prefs
-            IOHandler.initializeAllSettings()
-            addMonthDivider()
-            addTestEvent()
-        }
-        updateTournamentFragments()
-    }
-
-    fun unlockAppBar() {
-        app_bar.isActivated = true
-        setAppBarDragging(true)
-    }
-
-    fun lockAppbar() {
-        this.app_bar.setExpanded(false, false)
-        app_bar.isActivated = false
-        setAppBarDragging(false)
-    }
-
-    private fun setAppBarDragging(isEnabled: Boolean) {
-        val params = this.app_bar.layoutParams as CoordinatorLayout.LayoutParams
-        val behavior = AppBarLayout.Behavior()
-        behavior.setDragCallback(object : AppBarLayout.Behavior.DragCallback() {
-            override fun canDrag(appBarLayout: AppBarLayout): Boolean {
-                return isEnabled
-            }
-        })
-        params.behavior = behavior
-    }
-
-    override fun onNewIntent(intent: Intent?) {
-        super.onNewIntent(intent)
-        val eventID = intent?.getIntExtra(FRAGMENT_EXTRA_TITLE_EVENTID, -1)
-        val type = intent?.getStringExtra(FRAGMENT_EXTRA_TITLE_TYPE)
-        if (toolbar.menu.findItem(R.id.toolbar_search)?.actionView != null) {
-
-            (toolbar.menu.findItem(R.id.toolbar_search)?.actionView as android.support.v7.widget.SearchView).apply {
-                //close search view
-                toolbar.collapseActionView()
-            }
-
-            if (eventID != null && eventID > -1 && type != null) {
-                startFragments(eventID, type)
-            }
-        }
-    }
-
-    private fun startFragments(eventID: Int, type: String) {
-        val bundle = Bundle()
-        //do this in more adaptable way
-        bundle.putInt(
-                FRAGMENT_EXTRA_TITLE_EVENTID,
-                eventID
-        )
-
-        EventHandler.getEventToEventIndex(eventID)?.let { event ->
-
-            val eventFragment: Fragment? = when (event) {
-                is EventTournament -> {
-                    if (type == FRAGMENT_TYPE_SHOW) {
-                        ShowTournamentEvent.newInstance()
-                    } else {
-                        TournamentInstanceFragment.newInstance()
-                    }
-                }
-                /* is AnnualEvent -> {
-                     if (type == FRAGMENT_TYPE_SHOW) {
-                         ShowAnnualEvent.newInstance()
-                     } else {
-                         AnnualEventInstanceFragment.newInstance()
-                     }
-                 }*/
-                is OneTimeEvent -> {
-                    if (type == FRAGMENT_TYPE_SHOW) {
-                        ShowOneTimeEvent.newInstance()
-                    } else {
-                        OneTimeEventInstanceFragment.newInstance()
-                    }
-                }
-                else -> {
-                    null
-                }
-            }
-            if (eventFragment != null) {
-                val ft = supportFragmentManager.beginTransaction()
-                // add arguments to fragment
-                eventFragment.arguments = bundle
-                ft.replace(
-                        R.id.fragment_placeholder,
-                        eventFragment
-                )
-                ft.addToBackStack(null)
-                ft.commit()
-            }
-        }
-    }
-
-    /**
-     * addMonthDivider adds all 12 month dividers (dividers between events to group them in month groups)
-     */
-    fun addMonthDivider() {
-        val cal = Calendar.getInstance()
-        cal.set(Calendar.YEAR, 1)
-        cal.set(Calendar.DAY_OF_MONTH, 1)
-        cal.set(Calendar.HOUR_OF_DAY, 0)
-        cal.set(Calendar.MINUTE, 0)
-        cal.set(Calendar.SECOND, 0)
-        for (i in 0 until 12) {
-            cal.set(Calendar.MONTH, i)
-            EventHandler.addEvent(
-                    MonthDivider(cal.time, resources.getStringArray(R.array.month_names)[i]),
-                    this,
-                    true
-            )
-        }
-    }
-
-    /**
-     * onRequestPermissionsResult is the callback function after requesting the users permission for android permissions
-     * In this case we request READ/WRITE rights on external storage and handle exporting/ importing event data from the external storage
-     */
-    override fun onRequestPermissionsResult(
-            requestCode: Int,
-            permissions: Array<out String>,
-            grantResults: IntArray) {
-        when (requestCode) {
-            //writing to external
-            6001 -> {
-                if ((grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED)) {
-                    writeDataToExternal()
-                } else {
-                    Toast.makeText(
-                            this,
-                            R.string.permissions_toast_denied_write,
-                            Toast.LENGTH_LONG
-                    ).show()
-                }
-            }
-            //reading from external
-            6002 -> {
-                if ((grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED)) {
-                    importDataFromExternal()
-                } else {
-                    Toast.makeText(
-                            this,
-                            R.string.permissions_toast_denied_read,
-                            Toast.LENGTH_LONG
-                    ).show()
-                }
-            }
-        }
-        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
-    }
-
-    companion object {
-        fun convertPxToDp(context: Context, px: Float): Float {
-            val metrics = context.resources.displayMetrics
-            return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_PX, px, metrics)
-        }
-
-        fun convertDpToPx(context: Context, dp: Float): Int {
-            val metrics = context.resources.displayMetrics
-            return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, metrics).toInt()
-        }
-
-        const val FRAGMENT_TYPE_SHOW = "SHOW"
-        const val FRAGMENT_TYPE_EDIT = "EDIT"
-
-        const val FRAGMENT_EXTRA_TITLE_TYPE = "TYPE"
-        const val FRAGMENT_EXTRA_TITLE_EVENTID = "EVENTID"
-        const val FRAGMENT_EXTRA_TITLE_EVENTSTRING = "EVENTSTRING"
-        const val FRAGMENT_EXTRA_TITLE_NOTIFICATIONID = "NOTIFICATIONID"
-        const val FRAGMENT_EXTRA_TITLE_POSITION = "POSITION"
-        const val FRAGMENT_EXTRA_TITLE_LOADALL = "LOADALL"
-    }
-
-    private fun loadTournaments() {
-        searchTournamentPresenter!!.loadTournaments()
-    }
-
-    private fun loadTournaments(count: Int) {
-        searchTournamentPresenter!!.loadTournaments(count)
-    }
-
-    override fun showProgress() {
-        progressDialog = ProgressDialog.show(this, Constants.EMPTY_STRING, this.getString(R.string.please_wait))
-    }
-
-    override fun hideProgress() {
-        if (progressDialog != null) {
-            progressDialog!!.dismiss()
-        }
-    }
-
-    override fun showAlertDialog(title: Int, message: Int, buttonText: Int, cancelable: Boolean) {
-
-    }
-
-    override fun dialogConfirmButtonClicked() {
-
-    }
-
-    override fun setConnectionStatus(connectivityStatus: Int?) {
-        searchTournamentPresenter?.setConnectivityStatus(connectivityStatus)
-    }
-
-    private fun transformDate(dateString: String?): String? {
-        return try {
-            val bdFormat = SimpleDateFormat("dd/mm/yyyy", Locale.getDefault())
-            val newFormat = SimpleDateFormat("dd.mm.yyyy", Locale.getDefault())
-            val date = bdFormat.parse(dateString)
-            newFormat.format(date)
-        } catch (e: Exception) {
-            null
-        }
-    }
-
-    private fun updateTournamentFragments(){
-        val transaction = supportFragmentManager.beginTransaction()
-        transaction.replace(
-                R.id.fragment_placeholder,
-                TournamentListFragment.newInstance()
-        ).commit()
-
-
-        //start loading bitmap drawables in other thread to not block ui
-        Thread(Runnable
-        {
-            BitmapHandler.loadAllBitmaps(this)
-            runOnUiThread {
-                if (recyclerView != null) {
-                    recyclerView.adapter!!.notifyDataSetChanged()
-                }
-            }
-        }).start()
-
-        if (intent != null) {
-            if (intent?.getBooleanExtra(FRAGMENT_EXTRA_TITLE_LOADALL, false) == true) {
-                val eventID = intent?.getIntExtra(FRAGMENT_EXTRA_TITLE_EVENTID, -1)
-                val type = intent?.getStringExtra(FRAGMENT_EXTRA_TITLE_TYPE)
-                if (eventID != null && eventID > -1 && type != null) {
-                    startFragments(eventID, type)
-                }
-            }
-            intent = null
-        }
-    }
-
-    fun loadTournamentsFromLocalStorage(){
-        IOHandler.readAll(this)
-    }
-
-    override fun showTournaments(tournaments: List<TournamentDTO>) {
-        //разделить тут по методам, вынести отдалельно
-        IOHandler.clearSharedPrefEventData()
-        tournaments.forEach {
-            val event = EventTournament(it.id.toInt(), EventDate.parseStringToDate(transformDate(it.startDate)!!, DateFormat.DEFAULT, Locale.GERMAN), it.name!!)
-            event.name = it.name!!
-            event.fullDescription = it.fullDescription!!
-            event.shortDescription = it.shortDescription!!
-            event.imageUri = it.image!!
-            event.finishDate = EventDate.parseStringToDate(transformDate(it.finishDate)!!, DateFormat.DEFAULT, Locale.GERMAN)
-            EventHandler.addEvent(
-                    event,
-                    this,
-                    writeAfterAdd = true,
-                    addNewNotification = false,
-                    updateEventList = true,
-                    addBitmap = false
-            )
-        }
-    }
-
-    fun writeDataToExternal() {
-        /*if (IOHandler.writeAllEventsToExternalStorage(this)) {
-
-            try {
-                this.supportFragmentManager.popBackStack()
-            } catch (e: Exception) {
-                Log.e("MainActivity", e.localizedMessage)
-            }
-
-            Snackbar.make(
-                    main_coordinator_layout,
-                    R.string.permissions_snackbar_granted_write,
-                    Snackbar.LENGTH_LONG
-            ).show()
-        }*/
-    }
-
-    fun importDataFromExternal() {
-        /*if (IOHandler.importEventsFromExternalStorage(this)) {
-
-            try {
-                this.supportFragmentManager.popBackStack()
-            } catch (e: Exception) {
-                Log.e("MainActivity", e.localizedMessage)
-            }
-
-            Snackbar.make(
-                    main_coordinator_layout,
-                    R.string.permissions_snackbar_granted_read,
-                    Snackbar.LENGTH_LONG
-            ).show()
-        }*/
-    }
-
-    private fun addTestEvent() {
-        EventHandler.addEvent(
-                EventTournament(
-                        111,
-                        EventDate.parseStringToDate("09.02.19", DateFormat.DEFAULT, Locale.GERMAN),
-                        "Belarus Chess"
-                ),
-                this,
-                true
-        )
-    }
-}
Index: app/src/main/java/bobrchess/of/by/belaruschess/handler/SearchHandler.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/handler/SearchHandler.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/handler/SearchHandler.kt	(date 1582220303749)
@@ -10,7 +10,7 @@
 object SearchHandler {
 
     fun searchOnEventData(searchString: String): List<Int> {
-        return searchOnEventData(searchString, EventHandler.getList())
+        return searchOnEventData(searchString, UserHandler.getList())
     }
 
     fun searchOnEventData(searchString: String, events: List<EventDate>): List<Int> {
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/HelpFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/HelpFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/HelpFragment.kt	(date 1582220304156)
@@ -11,8 +11,6 @@
 import android.view.ViewGroup
 import bobrchess.of.by.belaruschess.R
 import bobrchess.of.by.belaruschess.adapter.HelpAdapter
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
-import bobrchess.of.by.belaruschess.view.activity.impl.MainOldActivity
 
 class HelpFragment : Fragment() {
 
@@ -34,11 +32,11 @@
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-        (context as MainActivity).setSupportActionBar(toolbar)
+        (context as UsersActivity).setSupportActionBar(toolbar)
         setHasOptionsMenu(true)
 
-        (context as MainActivity).supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back)
-        (context as MainActivity).supportActionBar?.setDisplayHomeAsUpEnabled(true)
+        (context as UsersActivity).supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back)
+        (context as UsersActivity).supportActionBar?.setDisplayHomeAsUpEnabled(true)
 
         viewManager = LinearLayoutManager(view.context)
         viewAdapter = HelpAdapter(context!!)
@@ -55,7 +53,7 @@
     override fun onOptionsItemSelected(item: MenuItem?): Boolean {
         when (item?.itemId) {
             android.R.id.home -> {
-                (context as MainActivity).supportFragmentManager.popBackStackImmediate()
+                (context as UsersActivity).supportFragmentManager.popBackStackImmediate()
             }
         }
         return super.onOptionsItemSelected(item)
Index: app/src/main/res/menu/menu_tournament.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/menu_tournament.xml	(date 1582219169000)
+++ app/src/main/res/menu/menu_tournament.xml	(date 1582220303619)
@@ -1,7 +1,7 @@
 <menu xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
-    tools:context=".MainActivity">
+    tools:context=".UsersActivity">
 
     <item
         android:id="@+id/action_games"
Index: app/src/main/res/menu/menu_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/menu_main.xml	(date 1582219169000)
+++ app/src/main/res/menu/menu_main.xml	(date 1582220304265)
@@ -1,7 +1,7 @@
 <menu xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
-    tools:context=".MainActivity">
+    tools:context=".UsersActivity">
   <!--  <item
         android:id="@+id/action_settings"
         android:orderInCategory="3"
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/UserInstanceFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/UserInstanceFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/UserInstanceFragment.kt	(date 1582220304025)
@@ -24,15 +24,15 @@
 import bobrchess.of.by.belaruschess.dto.PlaceDTO
 import bobrchess.of.by.belaruschess.dto.TournamentDTO
 import bobrchess.of.by.belaruschess.dto.UserDTO
-import bobrchess.of.by.belaruschess.handler.BitmapHandler
-import bobrchess.of.by.belaruschess.handler.EventHandler
-import bobrchess.of.by.belaruschess.handler.IOHandler
+import bobrchess.of.by.belaruschess.handler.UserBitmapHandler
+import bobrchess.of.by.belaruschess.handler.UserHandler
+import bobrchess.of.by.belaruschess.handler.UserIOHandler
 import bobrchess.of.by.belaruschess.model.EventDate
 import bobrchess.of.by.belaruschess.presenter.impl.AddTournamentPresenterImpl
 import bobrchess.of.by.belaruschess.util.Util
 import bobrchess.of.by.belaruschess.view.activity.AddTournamentContractView
 import bobrchess.of.by.belaruschess.view.activity.PackageModel
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
+import bobrchess.of.by.belaruschess.view.activity.impl.UsersActivity
 import com.procrastimax.birthdaybuddy.models.EventTournament
 import kotlinx.android.synthetic.main.fragment_add_new_tournament.*
 import kotlinx.android.synthetic.main.fragment_event_list.*
@@ -60,7 +60,7 @@
     private var isEditedBirthday: Boolean = false
 
     /**
-     * eventID is the index of the clicked item in EventListFragments RecyclerView, this is handy to get the birthday instance from the EventHandler
+     * eventID is the index of the clicked item in EventListFragments RecyclerView, this is handy to get the birthday instance from the UserHandler
      */
     var eventID = -1
 
@@ -213,7 +213,7 @@
         refereeSpinner.onItemSelectedListener = RefereeItemSelectedListener()
         placeSpinner.onItemSelectedListener = PlaceItemSelectedListener()
 
-        if (IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_date_as_calendar_view) == false) {
+        if (UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_date_as_calendar_view) == false) {
             isCalendarViewSelected = false
             editStartDateCalendarview.visibility = EditText.INVISIBLE
             editEndDateCalendarview.visibility = EditText.INVISIBLE
@@ -241,8 +241,8 @@
 
             setToolbarTitle(context!!.resources.getString(R.string.toolbar_title_edit_tournament))
 
-            eventID = (arguments!!.getInt(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID))
-            EventHandler.getEventToEventIndex(eventID)?.let { tournament ->
+            eventID = (arguments!!.getInt(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID))
+            UserIOHandler.getEventToEventIndex(eventID)?.let { tournament ->
                 if (tournament is EventTournament) {
                     refereeId = tournament.refereeId!!.toInt()
                     placeId = tournament.placeId!!
@@ -307,10 +307,10 @@
                                     Snackbar.LENGTH_LONG
                                 )
                                 .setAction(R.string.undo) {
-                                    EventHandler.addEvent(tournament, contextTemp!!, true)
+                                    UserHandler.addEvent(tournament, contextTemp!!, true)
                                     //get last fragment in stack list, which should be TournamentListFragment, so we can update the recycler view
                                     val fragment =
-                                        (contextTemp as MainActivity).supportFragmentManager.fragments.last()
+                                        (contextTemp as UsersActivity).supportFragmentManager.fragments.last()
                                     if (fragment is TournamentListFragment) {
                                         fragment.recyclerView.adapter!!.notifyDataSetChanged()
                                         fragment.tv_no_events.visibility = TextView.GONE
@@ -427,14 +427,14 @@
             dialog.findViewById<ConstraintLayout>(R.id.layout_bottom_sheet_delete).apply {
                 this?.setOnClickListener {
                     dialog.dismiss()
-                    if (isEditedBirthday && tournamentAvatarUri != null && (EventHandler.getEventToEventIndex(
+                    if (isEditedBirthday && tournamentAvatarUri != null && (UserHandler.getEventToEventIndex(
                             eventID
                         ) as EventTournament).imageUri != null
                     ) {
                         iv_add_avatar_btn.setImageResource(R.drawable.ic_birthday_person)
                         avatarImgWasEdited = true
                         tournamentAvatarUri = null
-                        BitmapHandler.removeBitmap(eventID, context!!)
+                        UserBitmapHandler.removeBitmap(eventID, context!!)
                     } else {
                         iv_add_avatar_btn.setImageResource(R.drawable.ic_birthday_person)
                         tournamentAvatarUri = null
@@ -506,10 +506,10 @@
             Thread(Runnable {
                 val bitmap =
                     MediaStore.Images.Media.getBitmap(context!!.contentResolver, fullPhotoUri)
-                (context as MainActivity).runOnUiThread {
+                (context as UsersActivity).runOnUiThread {
                     iv_add_avatar_btn.setImageBitmap(
-                        BitmapHandler.getCircularBitmap(
-                            BitmapHandler.getScaledBitmap(
+                        UserBitmapHandler.getCircularBitmap(
+                            UserBitmapHandler.getScaledBitmap(
                                 bitmap
                             ), resources
                         )
@@ -577,9 +577,9 @@
     private fun updateAvatarImage() {
         if (this.iv_add_avatar_btn != null && this.eventID >= 0) {
             //load maybe already existent avatar photo
-            EventHandler.getEventToEventIndex(eventID)?.let { event ->
+            UserHandler.getEventToEventIndex(eventID)?.let { event ->
                 if (event is EventTournament && event.imageUri != null) {
-                    this.iv_add_avatar_btn.setImageBitmap(BitmapHandler.getBitmapAt(eventID))
+                    this.iv_add_avatar_btn.setImageBitmap(UserBitmapHandler.getBitmapAt(eventID))
                     this.iv_add_avatar_btn.isEnabled = true
                 }
             }
@@ -827,7 +827,7 @@
     }
 
     override fun removeTournamentFromLocalStorage(id: Long) {
-        EventHandler.removeEventByID(eventID, context!!, true)
+        UserHandler.removeEventByID(eventID, context!!, true)
         closeBtnPressed()
     }
 
@@ -849,7 +849,7 @@
 
           //new birthday entry, just add a new entry in map
           if (!isEditedBirthday) {
-              EventHandler.addEvent(tournamentEvent, this.context!!, true)
+              UserHandler.addEvent(tournamentEvent, this.context!!, true)
               Snackbar.make(
                   view!!,
                   context!!.resources.getString(R.string.tournament_added_notification),
@@ -859,9 +859,9 @@
 
               //already existent birthday entry, overwrite old entry in map
           } else {
-              EventHandler.getEventToEventIndex(eventID)?.let { event ->
+              UserHandler.getEventToEventIndex(eventID)?.let { event ->
                   if (event is EventTournament) {
-                      EventHandler.changeEventAt(eventID, tournamentEvent, context!!, true)
+                      UserHandler.changeEventAt(eventID, tournamentEvent, context!!, true)
                       Snackbar.make(
                           view!!,
                           context!!.resources.getString(R.string.tournament_changed_notification),
Index: app/src/main/java/bobrchess/of/by/belaruschess/handler/UserIOHandler.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/handler/UserIOHandler.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/handler/UserIOHandler.kt	(date 1582220303353)
@@ -191,7 +191,7 @@
     fun isFirstStart(): Boolean {
         //when the key doesn't exist -> its the first start, so we have to invert the contains function
         return if (!settingsContainsKey(SharedPrefKeys.key_firstStart)) {
-            Log.i("IOHandler", "shared pref files didn't exist before")
+            Log.i("UserIOHandler", "shared pref files didn't exist before")
             val sharedPrefEditor = sharedPrefSettings.edit()
             //change key value to false bc its not the first start anymore
             //initialize first export/import with true
@@ -346,7 +346,7 @@
                                 }
                                 else ->
                                     Log.w(
-                                        "IOHandler",
+                                        "UserIOHandler",
                                         "Could not find identifier when trying to parse EventTournament"
                                     )
                             }
@@ -395,7 +395,7 @@
                                 }
                                 else ->
                                     Log.w(
-                                        "IOHandler",
+                                        "UserIOHandler",
                                         "Could not find identifier when trying to parse AnnualEvent"
                                     )
                             }
@@ -433,7 +433,7 @@
                                 }
                                 else ->
                                     Log.w(
-                                        "IOHandler",
+                                        "UserIOHandler",
                                         "Could not find identifier when trying to parse OneTimeEvent"
                                     )
                             }
@@ -471,7 +471,7 @@
                                 }
                                 else ->
                                     Log.w(
-                                        "IOHandler",
+                                        "UserIOHandler",
                                         "Could not find identifier when trying to parse EventMonthDivider"
                                     )
                             }
@@ -505,7 +505,7 @@
 
                 //when folder creating did not succeed
                 if (!storagePath.mkdirs() && !storagePath.exists()) {
-                    Log.e("IOHANDLER", "Directory not created")
+                    Log.e("UserIOHandler", "Directory not created")
                     Toast.makeText(
                         context,
                         R.string.permissions_toast_export_error,
@@ -540,7 +540,7 @@
             )
             //when folder finding did not succeed
             if (!storagePath.exists()) {
-                Log.e("IOHANDLER", "Directory not existent/ readable")
+                Log.e("UserIOHandler", "Directory not existent/ readable")
                 Toast.makeText(context, R.string.permissions_toast_import_error, Toast.LENGTH_LONG)
                     .show()
                 return false
@@ -568,7 +568,7 @@
                         }
                     }
                 } catch (e: Exception) {
-                    Log.e("IOHANDLER", e.localizedMessage)
+                    Log.e("UserIOHandler", e.localizedMessage)
                     Toast.makeText(
                         context,
                         R.string.permissions_toast_import_error,
Index: app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/TournamentActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/TournamentActivity.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/TournamentActivity.kt	(date 1582220302948)
@@ -20,7 +20,6 @@
 import bobrchess.of.by.belaruschess.dto.GameDTO
 import bobrchess.of.by.belaruschess.dto.TournamentDTO
 import bobrchess.of.by.belaruschess.fragments.OneFragment
-import bobrchess.of.by.belaruschess.fragments.TwoFragment
 import bobrchess.of.by.belaruschess.presenter.TournamentPresenter
 import bobrchess.of.by.belaruschess.presenter.impl.TournamentPresenterImpl
 import bobrchess.of.by.belaruschess.util.Constants.Companion.EMPTY_STRING
Index: app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/AuthorizationActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/AuthorizationActivity.java	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/AuthorizationActivity.java	(date 1582220304292)
@@ -134,7 +134,7 @@
 
     @Override
     public void startActivity(@NonNull UserDTO userDTO) {
-        Intent intent = new Intent(getApplicationContext(), MainActivity.class);
+        Intent intent = new Intent(getApplicationContext(), UsersActivity.class);
         putUserData(intent, userDTO);
         startActivity(intent);
         overridePendingTransition(R.anim.push_left_in, R.anim.push_left_out);
Index: app/src/main/java/bobrchess/of/by/belaruschess/model/EventUser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/model/EventUser.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/model/EventUser.kt	(date 1582220302917)
@@ -1,7 +1,5 @@
 package com.procrastimax.birthdaybuddy.models
 
-import bobrchess.of.by.belaruschess.dto.UserDTO
-import bobrchess.of.by.belaruschess.handler.IOHandler
 import bobrchess.of.by.belaruschess.model.EventDate
 import java.text.DateFormat
 import java.util.*
@@ -96,13 +94,13 @@
      * @return String
      */
     override fun toString(): String {
-        return "$Name${IOHandler.tournamentDivider_properties}${Identifier.Name}${IOHandler.tournamentDivider_values}${this.name}${IOHandler.tournamentDivider_properties}" +
-                "${Identifier.StartDate}${IOHandler.tournamentDivider_values}${parseDateToString(
+        return "$Name${UserIOHandler.tournamentDivider_properties}${Identifier.Name}${UserIOHandler.tournamentDivider_values}${this.name}${UserIOHandler.tournamentDivider_properties}" +
+                "${Identifier.StartDate}${UserIOHandler.tournamentDivider_values}${parseDateToString(
                         this.eventDate,
                         DateFormat.DEFAULT,
                         Locale.GERMAN
-                )}${IOHandler.tournamentDivider_properties}" +
-                "${Identifier.FinishDate}${IOHandler.tournamentDivider_values}${parseDateToString(
+                )}${UserIOHandler.tournamentDivider_properties}" +
+                "${Identifier.FinishDate}${UserIOHandler.tournamentDivider_values}${parseDateToString(
                         this.eventDate,
                         DateFormat.DEFAULT,
                         Locale.GERMAN//todo why??? выше то же
@@ -123,13 +121,13 @@
      * @return String
      */
     fun toStringWithoutImage(): String {
-        return "$Name${IOHandler.tournamentDivider_properties}${Identifier.Name}${IOHandler.tournamentDivider_values}${this.name}${IOHandler.tournamentDivider_properties}" +
-                "${Identifier.StartDate}${IOHandler.tournamentDivider_values}${parseDateToString(
+        return "$Name${UserIOHandler.tournamentDivider_properties}${Identifier.Name}${UserIOHandler.tournamentDivider_values}${this.name}${UserIOHandler.tournamentDivider_properties}" +
+                "${Identifier.StartDate}${UserIOHandler.tournamentDivider_values}${parseDateToString(
                         this.eventDate,
                         DateFormat.DEFAULT,
                         Locale.GERMAN
-                )}${IOHandler.tournamentDivider_properties}" +
-                "${Identifier.FinishDate}${IOHandler.tournamentDivider_values}${parseDateToString(
+                )}${UserIOHandler.tournamentDivider_properties}" +
+                "${Identifier.FinishDate}${UserIOHandler.tournamentDivider_values}${parseDateToString(
                         this.finishDate!!,
                         DateFormat.DEFAULT,
                         Locale.GERMAN//todo why??? выше то же
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/AbstractFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/AbstractFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/AbstractFragment.kt	(date 1582220302618)
@@ -4,26 +4,16 @@
 import android.content.Context
 import android.content.Intent
 import android.content.IntentFilter
-import android.os.Bundle
 import android.support.annotation.StringRes
 import android.support.v4.app.Fragment
-import android.support.v4.content.ContextCompat
-import android.support.v7.app.ActionBar
-import android.support.v7.widget.Toolbar
 import android.view.Gravity
-import android.view.View
-import android.widget.ImageView
-import android.widget.TextView
 import android.widget.Toast
-import bobrchess.of.by.belaruschess.R
 import bobrchess.of.by.belaruschess.util.Util
 import bobrchess.of.by.belaruschess.view.activity.BaseContractView
 import bobrchess.of.by.belaruschess.view.activity.PackageModel
 import bobrchess.of.by.belaruschess.view.activity.impl.ConfirmationDialog
 import bobrchess.of.by.belaruschess.view.activity.impl.ConfirmationListener
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import org.springframework.util.StringUtils
-import java.util.*
 
 
 /**
Index: app/src/main/res/layout/activity_test.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_test.xml	(date 1582219169000)
+++ app/src/main/res/layout/activity_test.xml	(date 1582220302388)
@@ -6,7 +6,7 @@
     android:paddingLeft="@dimen/activity_horizontal_margin"
     android:paddingRight="@dimen/activity_horizontal_margin"
     android:paddingTop="@dimen/activity_vertical_margin"
-    tools:context=".MainActivity" >
+    tools:context=".UsersActivity" >
 
     <LinearLayout
         android:id="@+id/linear_layout"
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(date 1582219169000)
+++ app/src/main/AndroidManifest.xml	(date 1582220303224)
@@ -55,7 +55,7 @@
 
         <!-- Main activity -->
         <activity
-            android:name=".view.activity.impl.MainActivity"
+            android:name=".view.activity.impl.UsersActivity"
             android:label="@string/app_name"
             android:launchMode="singleTask"
             android:screenOrientation="portrait"
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/AnnualEventInstanceFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/AnnualEventInstanceFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/AnnualEventInstanceFragment.kt	(date 1582220303173)
@@ -1,21 +1,17 @@
 package com.procrastimax.birthdaybuddy.fragments
 
-import android.app.AlertDialog
 import android.app.DatePickerDialog
 import android.os.Bundle
-import android.support.design.widget.Snackbar
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
 import android.widget.*
 import bobrchess.of.by.belaruschess.R
 import bobrchess.of.by.belaruschess.adapter.EventInstanceFragment
-import bobrchess.of.by.belaruschess.handler.EventHandler
+import bobrchess.of.by.belaruschess.handler.UserHandler
 import bobrchess.of.by.belaruschess.model.EventDate
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
+import bobrchess.of.by.belaruschess.view.activity.impl.UsersActivity
 import kotlinx.android.synthetic.main.fragment_annual_instance.*
-import kotlinx.android.synthetic.main.fragment_event_list.*
-import java.text.DateFormat
 import java.util.*
 
 /**
@@ -46,7 +42,7 @@
     private var isEditAnnualEvent = false
 
     /**
-     * eventID is the id the AnnualEvent has in the EventHandler - EventList
+     * eventID is the id the AnnualEvent has in the UserHandler - EventList
      * In other words this id is the index of the clicked item from the TournamentListFragment RecyclerView
      */
     var eventID = -1
@@ -103,8 +99,8 @@
 
             setToolbarTitle(context!!.resources.getString(R.string.toolbar_title_edit_annual_event))
 
-            eventID = (arguments!!.getInt(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID))
-            EventHandler.getEventToEventIndex(eventID)?.let { annualEvent ->
+            eventID = (arguments!!.getInt(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID))
+            UserHandler.getEventToEventIndex(eventID)?.let { annualEvent ->
                /* if (annualEvent is AnnualEvent) {
 
                     this.eventStartDate = annualEvent.eventDate
@@ -144,13 +140,13 @@
                                     Snackbar.LENGTH_LONG
                                 )
                                 .setAction(R.string.undo) {
-                                    EventHandler.addEvent(
+                                    UserHandler.addEvent(
                                         annualEvent, contextTemp!!,
                                         true
                                     )
                                     //get last fragment in stack list, when its eventlistfragment, we can update the recycler view
                                     val fragment =
-                                        (contextTemp as MainActivity).supportFragmentManager.fragments.last()
+                                        (contextTemp as UsersActivity).supportFragmentManager.fragments.last()
                                     if (fragment is TournamentListFragment) {
                                         fragment.recyclerView.adapter!!.notifyDataSetChanged()
                                         fragment.tv_no_events.visibility = TextView.GONE
@@ -158,7 +154,7 @@
                                 }
                                 .show()
 
-                            EventHandler.removeEventByID(eventID, contextTemp!!, true)
+                            UserHandler.removeEventByID(eventID, contextTemp!!, true)
                             closeBtnPressed()
                         }
                         alertBuilder.setNegativeButton(resources.getString(R.string.no)) { dialog, _ -> dialog.dismiss() }
@@ -277,7 +273,7 @@
             }
 */
             //new annual event entry, just add a new entry in map
-            /*EventHandler.addEvent(annualEvent, this.context!!, true)
+            /*UserHandler.addEvent(annualEvent, this.context!!, true)
             Snackbar
                     .make(
                             view!!,
@@ -293,9 +289,9 @@
 
                 //already annual event entry, overwrite old entry in map
             } else {
-                EventHandler.getEventToEventIndex(eventID)?.let { event ->
+                UserHandler.getEventToEventIndex(eventID)?.let { event ->
                    /* if (event is AnnualEvent && wasChangeMade(event)) {
-                        EventHandler.changeEventAt(eventID, annualEvent, context!!, true)
+                        UserHandler.changeEventAt(eventID, annualEvent, context!!, true)
                         Snackbar.make(
                             view!!,
                             context!!.resources.getString(
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/TournamentInstanceFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/TournamentInstanceFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/TournamentInstanceFragment.kt	(date 1582220303955)
@@ -24,15 +24,14 @@
 import bobrchess.of.by.belaruschess.dto.PlaceDTO
 import bobrchess.of.by.belaruschess.dto.TournamentDTO
 import bobrchess.of.by.belaruschess.dto.UserDTO
-import bobrchess.of.by.belaruschess.handler.BitmapHandler
-import bobrchess.of.by.belaruschess.handler.EventHandler
-import bobrchess.of.by.belaruschess.handler.IOHandler
+import bobrchess.of.by.belaruschess.handler.UserBitmapHandler
+import bobrchess.of.by.belaruschess.handler.UserHandler
 import bobrchess.of.by.belaruschess.model.EventDate
 import bobrchess.of.by.belaruschess.presenter.impl.AddTournamentPresenterImpl
 import bobrchess.of.by.belaruschess.util.Util
 import bobrchess.of.by.belaruschess.view.activity.AddTournamentContractView
 import bobrchess.of.by.belaruschess.view.activity.PackageModel
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
+import bobrchess.of.by.belaruschess.view.activity.impl.UsersActivity
 import com.procrastimax.birthdaybuddy.models.EventTournament
 import kotlinx.android.synthetic.main.fragment_add_new_tournament.*
 import kotlinx.android.synthetic.main.fragment_event_list.*
@@ -60,7 +59,7 @@
     private var isEditedBirthday: Boolean = false
 
     /**
-     * eventID is the index of the clicked item in EventListFragments RecyclerView, this is handy to get the birthday instance from the EventHandler
+     * eventID is the index of the clicked item in EventListFragments RecyclerView, this is handy to get the birthday instance from the UserHandler
      */
     var eventID = -1
 
@@ -213,7 +212,7 @@
         refereeSpinner.onItemSelectedListener = RefereeItemSelectedListener()
         placeSpinner.onItemSelectedListener = PlaceItemSelectedListener()
 
-        if (IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_date_as_calendar_view) == false) {
+        if (UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_date_as_calendar_view) == false) {
             isCalendarViewSelected = false
             editStartDateCalendarview.visibility = EditText.INVISIBLE
             editEndDateCalendarview.visibility = EditText.INVISIBLE
@@ -241,8 +240,8 @@
 
             setToolbarTitle(context!!.resources.getString(R.string.toolbar_title_edit_tournament))
 
-            eventID = (arguments!!.getInt(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID))
-            EventHandler.getEventToEventIndex(eventID)?.let { tournament ->
+            eventID = (arguments!!.getInt(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID))
+            UserHandler.getEventToEventIndex(eventID)?.let { tournament ->
                 if (tournament is EventTournament) {
                     refereeId = tournament.refereeId!!.toInt()
                     placeId = tournament.placeId!!
@@ -307,10 +306,10 @@
                                     Snackbar.LENGTH_LONG
                                 )
                                 .setAction(R.string.undo) {
-                                    EventHandler.addEvent(tournament, contextTemp!!, true)
+                                    UserHandler.addEvent(tournament, contextTemp!!, true)
                                     //get last fragment in stack list, which should be TournamentListFragment, so we can update the recycler view
                                     val fragment =
-                                        (contextTemp as MainActivity).supportFragmentManager.fragments.last()
+                                        (contextTemp as UsersActivity).supportFragmentManager.fragments.last()
                                     if (fragment is TournamentListFragment) {
                                         fragment.recyclerView.adapter!!.notifyDataSetChanged()
                                         fragment.tv_no_events.visibility = TextView.GONE
@@ -427,14 +426,14 @@
             dialog.findViewById<ConstraintLayout>(R.id.layout_bottom_sheet_delete).apply {
                 this?.setOnClickListener {
                     dialog.dismiss()
-                    if (isEditedBirthday && tournamentAvatarUri != null && (EventHandler.getEventToEventIndex(
+                    if (isEditedBirthday && tournamentAvatarUri != null && (UserHandler.getEventToEventIndex(
                             eventID
                         ) as EventTournament).imageUri != null
                     ) {
                         iv_add_avatar_btn.setImageResource(R.drawable.ic_birthday_person)
                         avatarImgWasEdited = true
                         tournamentAvatarUri = null
-                        BitmapHandler.removeBitmap(eventID, context!!)
+                        UserBitmapHandler.removeBitmap(eventID, context!!)
                     } else {
                         iv_add_avatar_btn.setImageResource(R.drawable.ic_birthday_person)
                         tournamentAvatarUri = null
@@ -506,10 +505,10 @@
             Thread(Runnable {
                 val bitmap =
                     MediaStore.Images.Media.getBitmap(context!!.contentResolver, fullPhotoUri)
-                (context as MainActivity).runOnUiThread {
+                (context as UsersActivity).runOnUiThread {
                     iv_add_avatar_btn.setImageBitmap(
-                        BitmapHandler.getCircularBitmap(
-                            BitmapHandler.getScaledBitmap(
+                        UserBitmapHandler.getCircularBitmap(
+                            UserBitmapHandler.getScaledBitmap(
                                 bitmap
                             ), resources
                         )
@@ -577,9 +576,9 @@
     private fun updateAvatarImage() {
         if (this.iv_add_avatar_btn != null && this.eventID >= 0) {
             //load maybe already existent avatar photo
-            EventHandler.getEventToEventIndex(eventID)?.let { event ->
+            UserHandler.getEventToEventIndex(eventID)?.let { event ->
                 if (event is EventTournament && event.imageUri != null) {
-                    this.iv_add_avatar_btn.setImageBitmap(BitmapHandler.getBitmapAt(eventID))
+                    this.iv_add_avatar_btn.setImageBitmap(UserBitmapHandler.getBitmapAt(eventID))
                     this.iv_add_avatar_btn.isEnabled = true
                 }
             }
@@ -827,7 +826,7 @@
     }
 
     override fun removeTournamentFromLocalStorage(id: Long) {
-        EventHandler.removeEventByID(eventID, context!!, true)
+        UserHandler.removeEventByID(eventID, context!!, true)
         closeBtnPressed()
     }
 
@@ -849,7 +848,7 @@
 
           //new birthday entry, just add a new entry in map
           if (!isEditedBirthday) {
-              EventHandler.addEvent(tournamentEvent, this.context!!, true)
+              UserHandler.addEvent(tournamentEvent, this.context!!, true)
               Snackbar.make(
                   view!!,
                   context!!.resources.getString(R.string.tournament_added_notification),
@@ -859,9 +858,9 @@
 
               //already existent birthday entry, overwrite old entry in map
           } else {
-              EventHandler.getEventToEventIndex(eventID)?.let { event ->
+              UserHandler.getEventToEventIndex(eventID)?.let { event ->
                   if (event is EventTournament) {
-                      EventHandler.changeEventAt(eventID, tournamentEvent, context!!, true)
+                      UserHandler.changeEventAt(eventID, tournamentEvent, context!!, true)
                       Snackbar.make(
                           view!!,
                           context!!.resources.getString(R.string.tournament_changed_notification),
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/UserListFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/UserListFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/UserListFragment.kt	(date 1582220303676)
@@ -20,7 +20,6 @@
 import bobrchess.of.by.belaruschess.presenter.SearchUserPresenter
 import bobrchess.of.by.belaruschess.presenter.impl.SearchUserPresenterImpl
 import bobrchess.of.by.belaruschess.view.activity.SearchUserContractView
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import bobrchess.of.by.belaruschess.view.activity.impl.UsersActivity
 import com.procrastimax.birthdaybuddy.models.EventUser
 import com.procrastimax.birthdaybuddy.models.OneTimeEvent
@@ -405,9 +404,9 @@
         }).start()
         var intent = this.activity?.intent
         if (intent != null) {
-            if (intent.getBooleanExtra(MainActivity.FRAGMENT_EXTRA_TITLE_LOADALL, false)) {
-                val eventID = intent.getIntExtra(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID, -1)
-                val type = intent.getStringExtra(MainActivity.FRAGMENT_EXTRA_TITLE_TYPE)
+            if (intent.getBooleanExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_LOADALL, false)) {
+                val eventID = intent.getIntExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID, -1)
+                val type = intent.getStringExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_TYPE)
                 if (eventID != null && eventID > -1 && type != null) {
                     startFragments(eventID, type)
                 }
@@ -420,7 +419,7 @@
         val bundle = Bundle()
         //do this in more adaptable way
         bundle.putInt(
-                MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+                UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
                 eventID
         )
 
@@ -428,7 +427,7 @@
 
             val eventFragment: Fragment? = when (event) {
                 is EventUser -> {//todo
-                    if (type == MainActivity.FRAGMENT_TYPE_SHOW) {
+                    if (type == UsersActivity.FRAGMENT_TYPE_SHOW) {
                         ShowUserEvent.newInstance()
                     } else {//todo
                         UserInstanceFragment.newInstance()
@@ -442,7 +441,7 @@
                      }
                  }*/
                 is OneTimeEvent -> {
-                    if (type == MainActivity.FRAGMENT_TYPE_SHOW) {
+                    if (type == UsersActivity.FRAGMENT_TYPE_SHOW) {
                         ShowOneTimeEvent.newInstance()
                     } else {
                         OneTimeEventInstanceFragment.newInstance()
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/AboutFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/AboutFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/AboutFragment.kt	(date 1582220303584)
@@ -11,7 +11,7 @@
 import android.view.View
 import android.view.ViewGroup
 import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
+import bobrchess.of.by.belaruschess.view.activity.impl.UsersActivity
 import com.procrastimax.birthdaybuddy.views.AboutAdapter
 
 class AboutFragment : Fragment() {
@@ -34,11 +34,11 @@
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-        (context as MainActivity).setSupportActionBar(toolbar)
+        (context as UsersActivity).setSupportActionBar(toolbar)
         setHasOptionsMenu(true)
 
-        (context as MainActivity).supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back)
-        (context as MainActivity).supportActionBar?.setDisplayHomeAsUpEnabled(true)
+        (context as UsersActivity).supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back)
+        (context as UsersActivity).supportActionBar?.setDisplayHomeAsUpEnabled(true)
 
         toolbar.setTitle(R.string.main_menu_item_about)
 
@@ -55,7 +55,7 @@
     override fun onOptionsItemSelected(item: MenuItem?): Boolean {
         when (item?.itemId) {
             android.R.id.home -> {
-                (context as MainActivity).supportFragmentManager.popBackStackImmediate()
+                (context as UsersActivity).supportFragmentManager.popBackStackImmediate()
             }
         }
         return super.onOptionsItemSelected(item)
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/OneTimeEventInstanceFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/OneTimeEventInstanceFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/OneTimeEventInstanceFragment.kt	(date 1582220302792)
@@ -13,11 +13,8 @@
 import android.widget.Toast
 import bobrchess.of.by.belaruschess.R
 import bobrchess.of.by.belaruschess.adapter.EventInstanceFragment
-import bobrchess.of.by.belaruschess.handler.EventHandler
 import bobrchess.of.by.belaruschess.model.EventDate
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import com.procrastimax.birthdaybuddy.models.OneTimeEvent
-import kotlinx.android.synthetic.main.fragment_event_list.*
 import kotlinx.android.synthetic.main.fragment_one_time_event_instance.*
 import java.text.DateFormat
 import java.util.*
@@ -46,7 +43,7 @@
     private var isEditOneTimeEvent = false
 
     /**
-     * eventID is the id the one-time event has in the EventHandler - eventlist
+     * eventID is the id the one-time event has in the UserHandler - eventlist
      * In other words this id is the index of the clicked item from the TournamentListFragment recyclerview
      */
     var eventID = -1
@@ -95,8 +92,8 @@
 
             setToolbarTitle(context!!.resources.getString(R.string.toolbar_title_edit_one_time_event))
 
-            eventID = (arguments!!.getInt(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID))
-            EventHandler.getEventToEventIndex(eventID)?.let { oneTimeEvent ->
+            eventID = (arguments!!.getInt(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID))
+            UserHandler.getEventToEventIndex(eventID)?.let { oneTimeEvent ->
                 if (oneTimeEvent is OneTimeEvent) {
 
                     this.eventStartDate = oneTimeEvent.eventDate
@@ -133,13 +130,13 @@
                                     Snackbar.LENGTH_LONG
                                 )
                                 .setAction(R.string.undo) {
-                                    EventHandler.addEvent(
+                                    UserHandler.addEvent(
                                         oneTimeEvent, contextTemp!!,
                                         true
                                     )
                                     //get last fragment in stack list, which should be TournamentListFragment, so we can update the recycler view
                                     val fragment =
-                                        (contextTemp as MainActivity).supportFragmentManager.fragments.last()
+                                        (contextTemp as UsersActivity).supportFragmentManager.fragments.last()
                                     if (fragment is TournamentListFragment) {
                                         fragment.recyclerView.adapter!!.notifyDataSetChanged()
                                         fragment.tv_no_events.visibility = TextView.GONE
@@ -147,7 +144,7 @@
                                 }
                                 .show()
 
-                            EventHandler.removeEventByID(eventID, contextTemp!!, true)
+                            UserHandler.removeEventByID(eventID, contextTemp!!, true)
                             closeBtnPressed()
                         }
                         alertBuilder.setNegativeButton(R.string.no) { dialog, _ -> dialog.dismiss() }
@@ -236,7 +233,7 @@
 
             //new oneTimeEvent entry, just add a new entry in map
             if (!isEditOneTimeEvent) {
-                EventHandler.addEvent(oneTimeEvent, this.context!!, true)
+                UserHandler.addEvent(oneTimeEvent, this.context!!, true)
 
                 Snackbar
                     .make(
@@ -252,9 +249,9 @@
 
                 //already existent oneTimeEvent entry, overwrite old entry in map
             } else {
-                EventHandler.getEventToEventIndex(eventID)?.let { event ->
+                UserHandler.getEventToEventIndex(eventID)?.let { event ->
                     if (event is OneTimeEvent) {
-                        EventHandler.changeEventAt(eventID, oneTimeEvent, context!!, true)
+                        UserHandler.changeEventAt(eventID, oneTimeEvent, context!!, true)
                         Snackbar.make(
                             view!!,
                             context!!.resources.getString(
Index: app/src/main/res/layout/activity_users.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_users.xml	(date 1582219169000)
+++ app/src/main/res/layout/activity_users.xml	(date 1582220303083)
@@ -5,7 +5,7 @@
     android:id="@+id/main_coordinator_layout"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context=".view.activity.impl.MainActivity">
+    tools:context=".view.activity.impl.UsersActivity">
 
     <android.support.design.widget.AppBarLayout
         android:id="@+id/app_bar"
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/SettingsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/SettingsFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/SettingsFragment.kt	(date 1582220304064)
@@ -11,9 +11,7 @@
 import android.view.View
 import android.view.ViewGroup
 import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.handler.EventHandler
 import bobrchess.of.by.belaruschess.handler.NotificationHandler
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import com.procrastimax.birthdaybuddy.views.SettingsAdapter
 
 
@@ -40,11 +38,11 @@
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-        (context as MainActivity).setSupportActionBar(toolbar)
+        (context as UsersActivity).setSupportActionBar(toolbar)
         setHasOptionsMenu(true)
 
-        (context as MainActivity).supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back)
-        (context as MainActivity).supportActionBar?.setDisplayHomeAsUpEnabled(true)
+        (context as UsersActivity).supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back)
+        (context as UsersActivity).supportActionBar?.setDisplayHomeAsUpEnabled(true)
         this.settingsContext = context!!
 
         toolbar.setTitle(R.string.settings_title)
@@ -62,7 +60,7 @@
     override fun onOptionsItemSelected(item: MenuItem?): Boolean {
         when (item?.itemId) {
             android.R.id.home -> {
-                (context as MainActivity).supportFragmentManager.popBackStackImmediate()
+                (context as UsersActivity).supportFragmentManager.popBackStackImmediate()
             }
         }
         return super.onOptionsItemSelected(item)
@@ -70,10 +68,10 @@
 
     override fun onPause() {
         Thread(Runnable {
-            NotificationHandler.cancelAllNotifications(this.settingsContext, EventHandler.getList())
+            NotificationHandler.cancelAllNotifications(this.settingsContext, UserHandler.getList())
             NotificationHandler.scheduleListEventNotifications(
                 this.settingsContext,
-                EventHandler.getList()
+                UserHandler.getList()
             )
         }).start()
         super.onPause()
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/EventInstanceFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/EventInstanceFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/EventInstanceFragment.kt	(date 1582220303927)
@@ -1,7 +1,6 @@
 package bobrchess.of.by.belaruschess.adapter
 
 import android.os.Bundle
-import android.support.v4.app.Fragment
 import android.support.v4.content.ContextCompat
 import android.support.v7.app.ActionBar
 import android.support.v7.widget.Toolbar
@@ -10,7 +9,6 @@
 import android.widget.ImageView
 import android.widget.TextView
 import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import java.util.*
 
 
@@ -33,11 +31,11 @@
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-        (context as MainActivity).setSupportActionBar(toolbar)
+        (context as UsersActivity).setSupportActionBar(toolbar)
         setHasOptionsMenu(false)
 
         //use 16dp as left content insent
-        toolbarContentInsentLeft = MainActivity.convertDpToPx(context!!, 16.toFloat())
+        toolbarContentInsentLeft = UsersActivity.convertDpToPx(context!!, 16.toFloat())
 
         //check if toolbar already has a view inflated
         var toolbarView: View? = toolbar.getChildAt(0)
@@ -88,7 +86,7 @@
         toolbar.setContentInsetsAbsolute(this.toolbarContentInsentLeft, toolbar.contentInsetRight)
         toolbar.setBackgroundColor(
             ContextCompat.getColor(
-                context as MainActivity,
+                context as UsersActivity,
                 android.R.color.transparent
             )
         )
@@ -99,7 +97,7 @@
      */
     fun closeBtnPressed() {
         if (context != null) {
-            (context as MainActivity).supportFragmentManager.popBackStack()
+            (context as UsersActivity).supportFragmentManager.popBackStack()
         }
     }
 
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/TournamentListFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/TournamentListFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/TournamentListFragment.kt	(date 1582220303986)
@@ -14,20 +14,21 @@
 import bobrchess.of.by.belaruschess.dto.TournamentDTO
 import bobrchess.of.by.belaruschess.fragments.HelpFragment
 import bobrchess.of.by.belaruschess.fragments.ShowTournamentEvent
-import bobrchess.of.by.belaruschess.handler.BitmapHandler
-import bobrchess.of.by.belaruschess.handler.EventHandler
-import bobrchess.of.by.belaruschess.handler.IOHandler
+import bobrchess.of.by.belaruschess.handler.UserBitmapHandler
+import bobrchess.of.by.belaruschess.handler.UserHandler
+import bobrchess.of.by.belaruschess.handler.UserIOHandler
 import bobrchess.of.by.belaruschess.model.EventDate
 import bobrchess.of.by.belaruschess.presenter.SearchTournamentPresenter
 import bobrchess.of.by.belaruschess.presenter.impl.SearchTournamentPresenterImpl
 import bobrchess.of.by.belaruschess.view.activity.SearchTournamentContractView
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import bobrchess.of.by.belaruschess.view.activity.impl.UsersActivity
 import com.procrastimax.birthdaybuddy.models.EventTournament
 import com.procrastimax.birthdaybuddy.models.OneTimeEvent
 import com.procrastimax.birthdaybuddy.views.EventAdapter
 import com.procrastimax.birthdaybuddy.views.RecycleViewItemDivider
 import kotlinx.android.synthetic.main.activity_main.*
+import kotlinx.android.synthetic.main.activity_users.*
+import kotlinx.android.synthetic.main.activity_users.scrollable_toolbar
 import kotlinx.android.synthetic.main.fragment_event_list.*
 import java.text.DateFormat
 import java.text.SimpleDateFormat
@@ -55,11 +56,11 @@
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
         setHasOptionsMenu(true)
-        (context as MainActivity).supportActionBar?.setDisplayHomeAsUpEnabled(false)
-        (context as MainActivity).supportActionBar?.setDisplayShowHomeEnabled(false)
+        (context as UsersActivity).supportActionBar?.setDisplayHomeAsUpEnabled(false)
+        (context as UsersActivity).supportActionBar?.setDisplayShowHomeEnabled(false)
 
-        (context as MainActivity).scrollable_toolbar.isTitleEnabled = false
-        (context as MainActivity).toolbar.title = getString(R.string.app_name)
+        (context as UsersActivity).scrollable_toolbar.isTitleEnabled = false
+        (context as UsersActivity).toolbar_users.title = getString(R.string.app_name)
 
         isFABOpen = false
 
@@ -133,7 +134,7 @@
     override fun onResume() {
         super.onResume()
         //when no items except of the 12 month items are in the event list, then display text message
-        if (EventHandler.getList().size - 12 == 0) {
+        if (UserHandler.getList().size - 12 == 0) {
             tv_no_events.visibility = TextView.VISIBLE
         } else {
             tv_no_events.visibility = TextView.GONE
@@ -249,8 +250,8 @@
      */
     private fun traverseForFirstMonthEntry(): Int {
         val currentMonth = Calendar.getInstance().get(Calendar.MONTH)
-        for (i in 0 until EventHandler.getList().size) {
-            if (EventHandler.getList()[i].getMonth() == currentMonth)
+        for (i in 0 until UserHandler.getList().size) {
+            if (UserHandler.getList()[i].getMonth() == currentMonth)
                 return i
         }
         return 0
@@ -378,7 +379,7 @@
 
     override fun showTournaments(tournaments: List<TournamentDTO>) {
         //разделить тут по методам, вынести отдалельно
-        IOHandler.clearSharedPrefEventData()
+        UserIOHandler.clearSharedPrefEventData()
         tournaments.forEach {
             val event = EventTournament(it.id.toInt(), EventDate.parseStringToDate(transformDate(it.startDate)!!, DateFormat.DEFAULT, Locale.GERMAN), it.name!!)
             event.name = it.name!!
@@ -386,7 +387,7 @@
             event.shortDescription = it.shortDescription!!
             event.imageUri = it.image!!
             event.finishDate = EventDate.parseStringToDate(transformDate(it.finishDate)!!, DateFormat.DEFAULT, Locale.GERMAN)
-            EventHandler.addEvent(
+            UserHandler.addEvent(
                     event,
                     this.context!!,
                     writeAfterAdd = true,
@@ -409,16 +410,16 @@
         //start loading bitmap drawables in other thread to not block ui
         Thread(Runnable
         {
-            BitmapHandler.loadAllBitmaps(this.context!!)
+            UserBitmapHandler.loadAllBitmaps(this.context!!)
             this.activity?.runOnUiThread {
                 recyclerView.adapter!!.notifyDataSetChanged()
             }
         }).start()
         var intent = this.activity?.intent
         if (intent != null) {
-            if (intent.getBooleanExtra(MainActivity.FRAGMENT_EXTRA_TITLE_LOADALL, false)) {
-                val eventID = intent.getIntExtra(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID, -1)
-                val type = intent.getStringExtra(MainActivity.FRAGMENT_EXTRA_TITLE_TYPE)
+            if (intent.getBooleanExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_LOADALL, false)) {
+                val eventID = intent.getIntExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID, -1)
+                val type = intent.getStringExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_TYPE)
                 if (eventID != null && eventID > -1 && type != null) {
                     startFragments(eventID, type)
                 }
@@ -431,15 +432,15 @@
         val bundle = Bundle()
         //do this in more adaptable way
         bundle.putInt(
-                MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+                UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
                 eventID
         )
 
-        EventHandler.getEventToEventIndex(eventID)?.let { event ->
+        UserHandler.getEventToEventIndex(eventID)?.let { event ->
 
             val eventFragment: Fragment? = when (event) {
                 is EventTournament -> {
-                    if (type == MainActivity.FRAGMENT_TYPE_SHOW) {
+                    if (type == UsersActivity.FRAGMENT_TYPE_SHOW) {
                         ShowTournamentEvent.newInstance()
                     } else {
                         TournamentInstanceFragment.newInstance()
@@ -453,7 +454,7 @@
                      }
                  }*/
                 is OneTimeEvent -> {
-                    if (type == MainActivity.FRAGMENT_TYPE_SHOW) {
+                    if (type == UsersActivity.FRAGMENT_TYPE_SHOW) {
                         ShowOneTimeEvent.newInstance()
                     } else {
                         OneTimeEventInstanceFragment.newInstance()
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowEventFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowEventFragment.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowEventFragment.kt	(date 1582220303437)
@@ -7,9 +7,6 @@
 import android.view.MenuItem
 import android.view.View
 import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.handler.EventHandler
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
-import kotlinx.android.synthetic.main.activity_main.*
 
 abstract class ShowEventFragment : Fragment() {
 
@@ -32,8 +29,8 @@
         super.onViewCreated(view, savedInstanceState)
         setHasOptionsMenu(true)
 
-        (context as MainActivity).supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back)
-        (context as MainActivity).supportActionBar?.setDisplayHomeAsUpEnabled(true)
+        (context as UsersActivity).supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back)
+        (context as UsersActivity).supportActionBar?.setDisplayHomeAsUpEnabled(true)
         setToolbarTitle(context!!.resources.getString(R.string.app_name))
 
         //to show the information about the instance, the fragment has to be bundled with an argument
@@ -42,14 +39,14 @@
 
             //if a event was deleted in the edit_event fragment "above"
             //then we land at this point, so we have to check whether the event to the ID is existent
-            if (EventHandler.getEventToEventIndex(eventID) != null) {
+            if (UserHandler.getEventToEventIndex(eventID) != null) {
                 this.updateUI()
             } else {
                 closeButtonPressed()
             }
         } else if (arguments != null) {
             //position = arguments!!.getInt(ITEM_ID_PARAM)
-            eventID = arguments!!.getInt(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID)
+            eventID = arguments!!.getInt(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID)
             updateUI()
         }
     }
@@ -70,20 +67,20 @@
             R.id.toolbar_edit -> {
                 editEvent()
                 //when leave fragment, change status of home button
-                (context as MainActivity).supportActionBar?.setDisplayHomeAsUpEnabled(false)
+                (context as UsersActivity).supportActionBar?.setDisplayHomeAsUpEnabled(false)
             }
         }
         return super.onOptionsItemSelected(item)
     }
 
     fun setToolbarTitle(title: String) {
-        (context as MainActivity).scrollable_toolbar.title = title
+        (context as UsersActivity).scrollable_toolbar.title = title
     }
 
     /**
      * closeButtonPressed emulated a press on androids "back button" to close/ detach a fragment
      */
     private fun closeButtonPressed() {
-        (context as MainActivity).supportFragmentManager.popBackStack()
+        (context as UsersActivity).supportFragmentManager.popBackStack()
     }
 }
\ No newline at end of file
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowOneTimeEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowOneTimeEvent.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowOneTimeEvent.kt	(date 1582220302553)
@@ -8,9 +8,7 @@
 import android.view.ViewGroup
 import android.widget.TextView
 import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.handler.EventHandler
 import bobrchess.of.by.belaruschess.model.EventDate
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import com.procrastimax.birthdaybuddy.models.OneTimeEvent
 import kotlinx.android.synthetic.main.fragment_show_one_time_event.*
 import java.text.DateFormat
@@ -29,7 +27,7 @@
      * updateUI updates all TextViews and other views to the current instance(AnnualEvent, Birthday, OneTimeEvent) data
      */
     override fun updateUI() {
-        EventHandler.getEventToEventIndex(eventID)?.let { oneTimeEvent ->
+        UserHandler.getEventToEventIndex(eventID)?.let { oneTimeEvent ->
             if (oneTimeEvent is OneTimeEvent) {
                 //set name of one_time event
                 this.tv_show_one_time_event_name.text = oneTimeEvent.name
@@ -82,7 +80,7 @@
      * It provides a simple intent to share data as plain text in other apps
      */
     override fun shareEvent() {
-        EventHandler.getEventToEventIndex(eventID)?.let { oneTimeEvent ->
+        UserHandler.getEventToEventIndex(eventID)?.let { oneTimeEvent ->
             if (oneTimeEvent is OneTimeEvent) {
 
                 val intent = Intent(Intent.ACTION_SEND)
@@ -138,10 +136,10 @@
     override fun editEvent() {
         val bundle = Bundle()
         bundle.putInt(
-            MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+            UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
             eventID
         )
-        val ft = (context as MainActivity).supportFragmentManager.beginTransaction()
+        val ft = (context as UsersActivity).supportFragmentManager.beginTransaction()
 
         // add arguments to fragment
         val oneTimeEventInstance = OneTimeEventInstanceFragment.newInstance()
Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_main.xml	(date 1582219169000)
+++ app/src/main/res/layout/activity_main.xml	(date 1582220303114)
@@ -5,7 +5,7 @@
     android:id="@+id/main_coordinator_layout"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context=".view.activity.impl.MainActivity">
+    tools:context=".view.activity.impl.UsersActivity">
 
     <android.support.design.widget.AppBarLayout
         android:id="@+id/app_bar"
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowAnnualEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowAnnualEvent.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowAnnualEvent.kt	(date 1582220303323)
@@ -1,17 +1,10 @@
 package com.procrastimax.birthdaybuddy.fragments
 
-import android.content.Intent
 import android.os.Bundle
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
-import android.widget.TextView
 import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.handler.EventHandler
-import bobrchess.of.by.belaruschess.model.EventDate
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
-import kotlinx.android.synthetic.main.fragment_show_annual_event.*
-import java.text.DateFormat
 
 /**
  * ShowAnnualEvent is a fragment to show all known data from an instance of EventTournament
@@ -29,7 +22,7 @@
      * updateUI updates all TextViews and other views to the current instance(AnnualEvent, Birthday) data
      */
     override fun updateUI() {
-        EventHandler.getEventToEventIndex(eventID)?.let { annualEvent ->
+        UserHandler.getEventToEventIndex(eventID)?.let { annualEvent ->
            /* if (annualEvent is AnnualEvent) {
                 //set name of annual_event
                 this.tv_show_annual_event_name.text = annualEvent.name
@@ -100,7 +93,7 @@
      * It provides a simple intent to share data as plain text in other apps
      */
     override fun shareEvent() {
-        EventHandler.getEventToEventIndex(eventID)?.let { annualEvent ->
+        UserHandler.getEventToEventIndex(eventID)?.let { annualEvent ->
             /*if (annualEvent is AnnualEvent) {
 
                 val intent = Intent(Intent.ACTION_SEND)
@@ -156,10 +149,10 @@
     override fun editEvent() {
         val bundle = Bundle()
         bundle.putInt(
-            MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+            UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
             eventID
         )
-        val ft = (context as MainActivity).supportFragmentManager.beginTransaction()
+        val ft = (context as UsersActivity).supportFragmentManager.beginTransaction()
 
         // add arguments to fragment
         val newAnnualEventInstanceFragment = AnnualEventInstanceFragment.newInstance()
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowTournamentEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowTournamentEvent.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowTournamentEvent.kt	(date 1582220303255)
@@ -12,14 +12,10 @@
 import android.widget.ImageView
 import android.widget.TextView
 import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.handler.BitmapHandler
-import bobrchess.of.by.belaruschess.handler.EventHandler
 import bobrchess.of.by.belaruschess.model.EventDate
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import com.procrastimax.birthdaybuddy.fragments.ShowEventFragment
 import com.procrastimax.birthdaybuddy.fragments.TournamentInstanceFragment
 import com.procrastimax.birthdaybuddy.models.EventTournament
-import kotlinx.android.synthetic.main.activity_main.*
 import kotlinx.android.synthetic.main.fragment_show_tournament_event.*
 import java.text.DateFormat
 
@@ -35,7 +31,7 @@
         inflater: LayoutInflater, container: ViewGroup?,
         savedInstanceState: Bundle?
     ): View? {
-        (context as MainActivity).unlockAppBar()
+        (context as UsersActivity).unlockAppBar()
         return inflater.inflate(R.layout.fragment_show_tournament_event, container, false)
     }
 
@@ -44,15 +40,15 @@
      */
 
     override fun updateUI() {
-        (context as MainActivity).scrollable_toolbar.isTitleEnabled = true
-        EventHandler.getEventToEventIndex(eventID)?.let { tournamentEvent ->
+        (context as UsersActivity).scrollable_toolbar.isTitleEnabled = true
+        UserHandler.getEventToEventIndex(eventID)?.let { tournamentEvent ->
             if (tournamentEvent is EventTournament) {
                     this.tournament_name.text = tournamentEvent.name
                     this.tournament_short_description.visibility = TextView.VISIBLE
                     this.tournament_short_description.text = tournamentEvent.shortDescription
 
                 var scrollRange = -1
-                (context as MainActivity).app_bar.addOnOffsetChangedListener(AppBarLayout.OnOffsetChangedListener { appbarLayout, verticalOffset ->
+                (context as UsersActivity).app_bar.addOnOffsetChangedListener(AppBarLayout.OnOffsetChangedListener { appbarLayout, verticalOffset ->
                     if (scrollRange == -1) {
                         scrollRange = appbarLayout.totalScrollRange
                     }
@@ -67,14 +63,14 @@
 
                 //only set expanded title color to white, when background is not white, background is white when no avatar image is set
                 if (tournamentEvent.imageUri != null) {
-                    (context as MainActivity).scrollable_toolbar.setExpandedTitleColor(
+                    (context as UsersActivity).scrollable_toolbar.setExpandedTitleColor(
                         ContextCompat.getColor(
                             context!!,
                             R.color.white
                         )
                     )
                 } else {
-                    (context as MainActivity).scrollable_toolbar.setExpandedTitleColor(
+                    (context as UsersActivity).scrollable_toolbar.setExpandedTitleColor(
                         ContextCompat.getColor(
                             context!!,
                             R.color.darkGrey
@@ -144,31 +140,31 @@
     }
 
     private fun updateAvatarImage() {
-        if (this.iv_avatar != null && this.eventID >= 0 && (context as MainActivity).collapsable_toolbar_iv != null) {
-            val bitmap = BitmapHandler.getBitmapFromFile(context!!, this.eventID)
+        if (this.iv_avatar != null && this.eventID >= 0 && (context as UsersActivity).collapsable_toolbar_iv != null) {
+            val bitmap = UserBitmapHandler.getBitmapFromFile(context!!, this.eventID)
             setBitmapToToolbar(bitmap)
         }
     }
 
     private fun setBitmapToToolbar(bitmap: Bitmap?) {
-        (context as MainActivity).collapsable_toolbar_iv.visibility = ImageView.VISIBLE
+        (context as UsersActivity).collapsable_toolbar_iv.visibility = ImageView.VISIBLE
         if (bitmap != null) {
-            (context as MainActivity).collapsable_toolbar_iv.setImageBitmap(bitmap)
-            (context as MainActivity).collapsable_toolbar_iv.scaleType =
+            (context as UsersActivity).collapsable_toolbar_iv.setImageBitmap(bitmap)
+            (context as UsersActivity).collapsable_toolbar_iv.scaleType =
                 ImageView.ScaleType.CENTER_CROP
-            (context as MainActivity).app_bar.setExpanded(true, true)
+            (context as UsersActivity).app_bar.setExpanded(true, true)
         } else {
-            (context as MainActivity).app_bar.setExpanded(false, false)
-            (context as MainActivity).collapsable_toolbar_iv.scaleType =
+            (context as UsersActivity).app_bar.setExpanded(false, false)
+            (context as UsersActivity).collapsable_toolbar_iv.scaleType =
                 ImageView.ScaleType.FIT_CENTER
-            (context as MainActivity).collapsable_toolbar_iv.setImageResource(R.drawable.ic_birthday_person)
+            (context as UsersActivity).collapsable_toolbar_iv.setImageResource(R.drawable.ic_birthday_person)
         }
     }
 
     private fun closeExpandableToolbar() {
         setToolbarTitle(context!!.resources.getString(R.string.app_name))
-        (context as MainActivity).collapsable_toolbar_iv.visibility = ImageView.GONE
-        (context as MainActivity).lockAppbar()
+        (context as UsersActivity).collapsable_toolbar_iv.visibility = ImageView.GONE
+        (context as UsersActivity).lockAppbar()
     }
 
     /**
@@ -176,7 +172,7 @@
      * It provides a simple intent to share data as plain text in other apps
      */
     override fun shareEvent() {
-        EventHandler.getEventToEventIndex(eventID)?.let { birthday ->
+        UserHandler.getEventToEventIndex(eventID)?.let { birthday ->
             if (birthday is EventTournament) {
                 val intent = Intent(Intent.ACTION_SEND)
                 intent.type = "text/plain"
@@ -256,10 +252,10 @@
         val bundle = Bundle()
         //do this in more adaptable way
         bundle.putInt(
-            MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+            UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
             eventID
         )
-        val ft = (context as MainActivity).supportFragmentManager.beginTransaction()
+        val ft = (context as UsersActivity).supportFragmentManager.beginTransaction()
         // add arguments to fragment
         val newBirthdayFragment = TournamentInstanceFragment.newInstance()
         newBirthdayFragment.arguments = bundle
Index: app/src/main/java/bobrchess/of/by/belaruschess/adapter/EventAdapterSearching.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/adapter/EventAdapterSearching.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/adapter/EventAdapterSearching.kt	(date 1582220303899)
@@ -8,9 +8,6 @@
 import android.view.View
 import android.view.ViewGroup
 import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.handler.BitmapHandler
-import bobrchess.of.by.belaruschess.handler.EventHandler
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import com.procrastimax.birthdaybuddy.models.EventTournament
 import com.procrastimax.birthdaybuddy.models.MonthDivider
 import kotlinx.android.synthetic.main.tournament_event_item_view.view.*
@@ -32,9 +29,9 @@
      * @return Int
      */
     override fun getItemViewType(position: Int): Int {
-        when (EventHandler.getList()[position]) {
+        when (UserHandler.getList()[position]) {
             is EventTournament -> {
-                if (eventIDs.contains(EventHandler.getList()[position].eventID))
+                if (eventIDs.contains(UserHandler.getList()[position].eventID))
                     return 1
             }
         }
@@ -74,42 +71,42 @@
             //EventMonthDividerViewHolder
             0 -> {
                 holder.itemView.tv_divider_description_month.text =
-                    (EventHandler.getList()[position] as MonthDivider).month_name
+                    (UserHandler.getList()[position] as MonthDivider).month_name
             }
 
             //BirthdayEventViewHolder
             1 -> {
                 //check if is birthday event and if the year is given
-                EventHandler.getList()[position].let { birthdayEvent ->
+                UserHandler.getList()[position].let { birthdayEvent ->
                     if (birthdayEvent is EventTournament) {
 
                         //set on click listener for item
                         holder.itemView.setOnClickListener {
-                            //replace this activity with the MainActivity to show searched
-                            val intent = Intent(context, MainActivity::class.java)
+                            //replace this activity with the UsersActivity to show searched
+                            val intent = Intent(context, UsersActivity::class.java)
                             intent.putExtra(
-                                MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+                                UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
                                 birthdayEvent.eventID
                             )
-                            intent.putExtra(MainActivity.FRAGMENT_EXTRA_TITLE_POSITION, position)
+                            intent.putExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_POSITION, position)
                             intent.putExtra(
-                                MainActivity.FRAGMENT_EXTRA_TITLE_TYPE,
-                                MainActivity.FRAGMENT_TYPE_SHOW
+                                UsersActivity.FRAGMENT_EXTRA_TITLE_TYPE,
+                                UsersActivity.FRAGMENT_TYPE_SHOW
                             )
                             startActivity(context, intent, null)
                         }
 
                         holder.itemView.setOnLongClickListener {
-                            //replace this activity with the MainActivity to show searched
-                            val intent = Intent(context, MainActivity::class.java)
+                            //replace this activity with the UsersActivity to show searched
+                            val intent = Intent(context, UsersActivity::class.java)
                             intent.putExtra(
-                                MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+                                UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
                                 birthdayEvent.eventID
                             )
-                            intent.putExtra(MainActivity.FRAGMENT_EXTRA_TITLE_POSITION, position)
+                            intent.putExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_POSITION, position)
                             intent.putExtra(
-                                MainActivity.FRAGMENT_EXTRA_TITLE_TYPE,
-                                MainActivity.FRAGMENT_TYPE_EDIT
+                                UsersActivity.FRAGMENT_EXTRA_TITLE_TYPE,
+                                UsersActivity.FRAGMENT_TYPE_EDIT
                             )
                             startActivity(context, intent, null)
                             true
@@ -196,11 +193,11 @@
 
                         val avatarUri = birthdayEvent.imageUri
 
-                        //when called from MainActivity
-                        if (context is MainActivity) {
+                        //when called from UsersActivity
+                        if (context is UsersActivity) {
                             if (avatarUri != null) {
                                 holder.itemView.iv_birthday_event_item_image.setImageBitmap(
-                                    BitmapHandler.getBitmapAt(
+                                    UserBitmapHandler.getBitmapAt(
                                         birthdayEvent.eventID
                                     )
                                 )
@@ -211,7 +208,7 @@
                             //called from search activity
                             if (avatarUri != null) {
                                 holder.itemView.iv_birthday_event_item_image.setImageBitmap(
-                                    BitmapHandler.getBitmapAt(
+                                    UserBitmapHandler.getBitmapAt(
                                         birthdayEvent.eventID
                                     )
                                 )
@@ -227,10 +224,10 @@
 
     // Return the size of your dataset (invoked by the layout manager)
     override fun getItemCount(): Int {
-        return if (EventHandler.getList().isEmpty()) {
+        return if (UserHandler.getList().isEmpty()) {
             0
         } else {
-            EventHandler.getList().size
+            UserHandler.getList().size
         }
     }
 }
\ No newline at end of file
Index: app/src/main/java/bobrchess/of/by/belaruschess/adapter/RecycleViewItemDivider.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/adapter/RecycleViewItemDivider.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/adapter/RecycleViewItemDivider.kt	(date 1582220304097)
@@ -7,16 +7,15 @@
 import android.support.v7.widget.RecyclerView
 import android.view.View
 import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 
 class RecycleViewItemDivider(private val context: Context) : RecyclerView.ItemDecoration() {
     private var mDivider: Drawable =
             ContextCompat.getDrawable(context, R.drawable.horizontal_divider)!!
 
     override fun onDrawOver(c: Canvas, parent: RecyclerView, state: RecyclerView.State) {
-        val left = MainActivity.convertPxToDp(context, 24f).toInt()
+        val left = UsersActivity.convertPxToDp(context, 24f).toInt()
         val right =
-                parent.width - parent.paddingRight - MainActivity.convertPxToDp(context, 24f).toInt()
+                parent.width - parent.paddingRight - UsersActivity.convertPxToDp(context, 24f).toInt()
 
         val childCount = parent.childCount
         for (i in 0 until childCount - 1) {
Index: app/src/main/java/bobrchess/of/by/belaruschess/adapter/EventAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/adapter/EventAdapter.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/adapter/EventAdapter.kt	(date 1582220304182)
@@ -11,9 +11,6 @@
 import android.widget.TextView
 import bobrchess.of.by.belaruschess.R
 import bobrchess.of.by.belaruschess.fragments.ShowTournamentEvent
-import bobrchess.of.by.belaruschess.handler.BitmapHandler
-import bobrchess.of.by.belaruschess.handler.EventHandler
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import com.procrastimax.birthdaybuddy.fragments.OneTimeEventInstanceFragment
 import com.procrastimax.birthdaybuddy.fragments.ShowOneTimeEvent
 import com.procrastimax.birthdaybuddy.fragments.TournamentInstanceFragment
@@ -50,10 +47,10 @@
      * @return Int
      */
     override fun getItemViewType(position: Int): Int {
-        when (EventHandler.getList()[position]) {
+        when (UserHandler.getList()[position]) {
             is MonthDivider -> {
-                if (position < EventHandler.getList().size - 1) {
-                    if (EventHandler.getList()[position + 1] !is MonthDivider) {
+                if (position < UserHandler.getList().size - 1) {
+                    if (UserHandler.getList()[position + 1] !is MonthDivider) {
                         return 0
                     }
                 }
@@ -116,7 +113,7 @@
 
             //EventMonthDividerViewHolder
             0 -> {
-                EventHandler.getList()[position].let { monthDivider ->
+                UserHandler.getList()[position].let { monthDivider ->
                     if (monthDivider is MonthDivider) {
                         holder.itemView.tv_divider_description_month.text =
                             monthDivider.month_name
@@ -127,7 +124,7 @@
             //BirthdayEventViewHolder
             1 -> {
                 //check if is birthday event and if the year is given
-                EventHandler.getList()[position].let { birthday ->
+                UserHandler.getList()[position].let { birthday ->
                     if (birthday is EventTournament) {
                         //set on click listener for item
                         holder.itemView.setOnClickListener {
@@ -135,7 +132,7 @@
                                 val bundle = Bundle()
                                 //do this in more adaptable way
                                 bundle.putInt(
-                                    MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+                                    UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
                                     birthday.eventID
                                 )
                                 val ft = fragmentManager.beginTransaction()
@@ -156,7 +153,7 @@
                                 val bundle = Bundle()
                                 //do this in more adaptable way
                                 bundle.putInt(
-                                    MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+                                    UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
                                     birthday.eventID
                                 )
                                 val ft = fragmentManager.beginTransaction()
@@ -239,11 +236,11 @@
 
                         val avatarUri = birthday.imageUri
 
-                        //when context is MainActivity
-                        if (context is MainActivity) {
+                        //when context is UsersActivity
+                        if (context is UsersActivity) {
                             if (avatarUri != null) {
                                 holder.itemView.iv_birthday_event_item_image.setImageBitmap(
-                                    BitmapHandler.getBitmapAt(
+                                    UserBitmapHandler.getBitmapAt(
                                         birthday.eventID
                                     )
                                 )
@@ -258,7 +255,7 @@
             //annual event item view holder
             2 -> {
                 //check if is birthday event and if the year is given
-                EventHandler.getList()[position].let { annualEvent ->
+                UserHandler.getList()[position].let { annualEvent ->
                     /*if (annualEvent is AnnualEvent) {
                         //set on click listener for item
                         holder.itemView.setOnClickListener {
@@ -266,7 +263,7 @@
                                 val bundle = Bundle()
                                 //do this in more adaptable way
                                 bundle.putInt(
-                                    MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+                                    UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
                                     annualEvent.eventID
                                 )
                                 val ft = fragmentManager.beginTransaction()
@@ -287,7 +284,7 @@
                                 val bundle = Bundle()
                                 //do this in more adaptable way
                                 bundle.putInt(
-                                    MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+                                    UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
                                     annualEvent.eventID
                                 )
                                 val ft = fragmentManager.beginTransaction()
@@ -307,7 +304,7 @@
                         val textColor: Int
 
                         //set days until
-                        val daysUntil = EventHandler.getList()[position].getDaysUntil()
+                        val daysUntil = UserHandler.getList()[position].getDaysUntil()
                         if (daysUntil == 0) {
                             textColor = ContextCompat.getColor(context, R.color.colorAccent)
                             holder.itemView.tv_days_until_annual_value.text =
@@ -357,7 +354,7 @@
             //one time event item view holder
             3 -> {
                 //check if is birthday event and if the year is given
-                EventHandler.getList()[position].let { oneTimeEvent ->
+                UserHandler.getList()[position].let { oneTimeEvent ->
                     if (oneTimeEvent is OneTimeEvent) {
 
                         //set on click listener for item
@@ -365,7 +362,7 @@
                             if (isClickable) {
                                 val bundle = Bundle()
                                 bundle.putInt(
-                                    MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+                                    UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
                                     oneTimeEvent.eventID
                                 )
                                 val ft = fragmentManager.beginTransaction()
@@ -386,7 +383,7 @@
                                 val bundle = Bundle()
                                 //do this in more adaptable way
                                 bundle.putInt(
-                                    MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+                                    UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
                                     oneTimeEvent.eventID
                                 )
                                 val ft = fragmentManager.beginTransaction()
@@ -454,10 +451,10 @@
 
     // Return the size of your dataset (invoked by the layout manager)
     override fun getItemCount(): Int {
-        return if (EventHandler.getList().isEmpty()) {
+        return if (UserHandler.getList().isEmpty()) {
             0
         } else {
-            EventHandler.getList().size
+            UserHandler.getList().size
         }
     }
 }
\ No newline at end of file
Index: app/src/main/java/bobrchess/of/by/belaruschess/adapter/SettingsAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/adapter/SettingsAdapter.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/adapter/SettingsAdapter.kt	(date 1582220304124)
@@ -17,10 +17,7 @@
 import android.widget.TextView
 import android.widget.Toast
 import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.handler.EventHandler
-import bobrchess.of.by.belaruschess.handler.IOHandler
 import bobrchess.of.by.belaruschess.model.EventDate
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import kotlinx.android.synthetic.main.card_view_settings_extras.view.*
 import kotlinx.android.synthetic.main.card_view_settings_notification_tournament.view.*
 import java.util.*
@@ -84,64 +81,64 @@
                         context.getText(R.string.event_type_birthday)
 
                 val isEnabled =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationOnBirthday)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationOnBirthday)!!
                 if (!isEnabled) changeEnabledStatus(holder.itemView, isEnabled)
 
                 holder.itemView.sw_settings_notifcations.isChecked = isEnabled
                 holder.itemView.sw_settings_notifcations.setOnCheckedChangeListener { _, isChecked ->
                     changeEnabledStatus(holder.itemView, isChecked)
-                    IOHandler.writeSetting(
-                            IOHandler.SharedPrefKeys.key_isNotificationOnBirthday,
+                    UserIOHandler.writeSetting(
+                            UserIOHandler.SharedPrefKeys.key_isNotificationOnBirthday,
                             isChecked
                     )
                 }
 
                 // handle changing of showing calendar view as startDate input method for birthdays
                 holder.itemView.sw_date_as_calendarview.isChecked =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_date_as_calendar_view)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_date_as_calendar_view)!!
                 holder.itemView.sw_date_as_calendarview.setOnCheckedChangeListener { _, isChecked ->
-                    IOHandler.writeSetting(
-                            IOHandler.SharedPrefKeys.key_date_as_calendar_view,
+                    UserIOHandler.writeSetting(
+                            UserIOHandler.SharedPrefKeys.key_date_as_calendar_view,
                             isChecked
                     )
                 }
 
                 //sound switch
                 holder.itemView.sw_settings_sound.isChecked =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationSoundOnBirthday)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationSoundOnBirthday)!!
                 holder.itemView.sw_settings_sound.setOnCheckedChangeListener { _, isChecked ->
-                    IOHandler.writeSetting(
-                            IOHandler.SharedPrefKeys.key_isNotificationSoundOnBirthday,
+                    UserIOHandler.writeSetting(
+                            UserIOHandler.SharedPrefKeys.key_isNotificationSoundOnBirthday,
                             isChecked
                     )
                 }
 
                 //vibration switch
                 holder.itemView.sw_settings_vibration.isChecked =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationVibrationOnBirthday)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationVibrationOnBirthday)!!
                 holder.itemView.sw_settings_vibration.setOnCheckedChangeListener { _, isChecked ->
-                    IOHandler.writeSetting(
-                            IOHandler.SharedPrefKeys.key_isNotificationVibrationOnBirthday,
+                    UserIOHandler.writeSetting(
+                            UserIOHandler.SharedPrefKeys.key_isNotificationVibrationOnBirthday,
                             isChecked
                     )
                 }
 
                 //set notification time
                 holder.itemView.tv_settings_notificaton_time_value.text =
-                        IOHandler.getStringFromKey(IOHandler.SharedPrefKeys.key_strNotificationTimeBirthday)
+                        UserIOHandler.getStringFromKey(UserIOHandler.SharedPrefKeys.key_strNotificationTimeBirthday)
                 //set time picker dialog on click
                 holder.itemView.tv_settings_notificaton_time_value.setOnClickListener {
                     showTimePickerDialog(
                             it as TextView,
-                            IOHandler.SharedPrefKeys.key_strNotificationTimeBirthday
+                            UserIOHandler.SharedPrefKeys.key_strNotificationTimeBirthday
                     )
                 }
 
                 val notificationDateArray: BooleanArray = booleanArrayOf(
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeBirthday)!!,
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeBirthday)!!,
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeBirthday)!!,
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_eventdayBirthday)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeBirthday)!!,
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeBirthday)!!,
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeBirthday)!!,
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_eventdayBirthday)!!
                 )
 
                 val constrLayoutNotificationDay =
@@ -155,20 +152,20 @@
                                 holder.itemView.tv_settings_notification_day_value.text =
                                         getNotificationDateValueStringFromBooleanArray(notificationDateArray)
 
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeBirthday,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeBirthday,
                                         notificationDateArray[0]
                                 )
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeBirthday,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeBirthday,
                                         notificationDateArray[1]
                                 )
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeBirthday,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeBirthday,
                                         notificationDateArray[2]
                                 )
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_eventdayBirthday,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_eventdayBirthday,
                                         notificationDateArray[3]
                                 )
                             }
@@ -187,7 +184,7 @@
                 }
 
                 var notificationLight =
-                        IOHandler.getIntFromKey(IOHandler.SharedPrefKeys.key_notificationLightBirthday)!!
+                        UserIOHandler.getIntFromKey(UserIOHandler.SharedPrefKeys.key_notificationLightBirthday)!!
                 val constrLayoutNotificationLight =
                         holder.itemView.findViewById<ConstraintLayout>(R.id.constraint_layout_settings_notification_light)
                 //show checkbox dialog on click
@@ -199,8 +196,8 @@
                                 holder.itemView.tv_settings_notification_light_value.text =
                                         getNotifcationLightValueFromInt(notificationLight)
 
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_notificationLightBirthday,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_notificationLightBirthday,
                                         notificationLight
                                 )
                             }
@@ -226,54 +223,54 @@
                         context.getText(R.string.event_type_annual_event)
 
                 val isEnabled =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationOnAnnual)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationOnAnnual)!!
                 if (!isEnabled) changeEnabledStatus(holder.itemView, isEnabled)
 
                 holder.itemView.sw_settings_notifcations.isChecked = isEnabled
                 holder.itemView.sw_settings_notifcations.setOnCheckedChangeListener { _, isChecked ->
                     changeEnabledStatus(holder.itemView, isChecked)
-                    IOHandler.writeSetting(
-                            IOHandler.SharedPrefKeys.key_isNotificationOnAnnual,
+                    UserIOHandler.writeSetting(
+                            UserIOHandler.SharedPrefKeys.key_isNotificationOnAnnual,
                             isChecked
                     )
                 }
 
                 //sound switch
                 holder.itemView.sw_settings_sound.isChecked =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationSoundOnAnnual)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationSoundOnAnnual)!!
                 holder.itemView.sw_settings_sound.setOnCheckedChangeListener { _, isChecked ->
-                    IOHandler.writeSetting(
-                            IOHandler.SharedPrefKeys.key_isNotificationSoundOnAnnual,
+                    UserIOHandler.writeSetting(
+                            UserIOHandler.SharedPrefKeys.key_isNotificationSoundOnAnnual,
                             isChecked
                     )
                 }
 
                 //vibration switch
                 holder.itemView.sw_settings_vibration.isChecked =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationVibrationOnAnnual)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationVibrationOnAnnual)!!
                 holder.itemView.sw_settings_vibration.setOnCheckedChangeListener { _, isChecked ->
-                    IOHandler.writeSetting(
-                            IOHandler.SharedPrefKeys.key_isNotificationVibrationOnAnnual,
+                    UserIOHandler.writeSetting(
+                            UserIOHandler.SharedPrefKeys.key_isNotificationVibrationOnAnnual,
                             isChecked
                     )
                 }
 
                 //set notification time
                 holder.itemView.tv_settings_notificaton_time_value.text =
-                        IOHandler.getStringFromKey(IOHandler.SharedPrefKeys.key_strNotificationTimeAnnual)
+                        UserIOHandler.getStringFromKey(UserIOHandler.SharedPrefKeys.key_strNotificationTimeAnnual)
                 //set time picker dialog on click
                 holder.itemView.tv_settings_notificaton_time_value.setOnClickListener {
                     showTimePickerDialog(
                             it as TextView,
-                            IOHandler.SharedPrefKeys.key_strNotificationTimeAnnual
+                            UserIOHandler.SharedPrefKeys.key_strNotificationTimeAnnual
                     )
                 }
 
                 val notificationDateArray: BooleanArray = booleanArrayOf(
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeAnnual)!!,
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeAnnual)!!,
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeAnnual)!!,
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_eventdayAnnual)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeAnnual)!!,
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeAnnual)!!,
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeAnnual)!!,
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_eventdayAnnual)!!
                 )
 
                 val constrLayoutNotificationDay =
@@ -287,20 +284,20 @@
                                 holder.itemView.tv_settings_notification_day_value.text =
                                         getNotificationDateValueStringFromBooleanArray(notificationDateArray)
 
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeAnnual,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeAnnual,
                                         notificationDateArray[0]
                                 )
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeAnnual,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeAnnual,
                                         notificationDateArray[1]
                                 )
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeAnnual,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeAnnual,
                                         notificationDateArray[2]
                                 )
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_eventdayAnnual,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_eventdayAnnual,
                                         notificationDateArray[3]
                                 )
                             }
@@ -319,7 +316,7 @@
                 }
 
                 var notificationLight =
-                        IOHandler.getIntFromKey(IOHandler.SharedPrefKeys.key_notificationLightAnnual)!!
+                        UserIOHandler.getIntFromKey(UserIOHandler.SharedPrefKeys.key_notificationLightAnnual)!!
                 val constrLayoutNotificationLight =
                         holder.itemView.findViewById<ConstraintLayout>(R.id.constraint_layout_settings_notification_light)
                 //show checkbox dialog on click
@@ -331,8 +328,8 @@
                                 holder.itemView.tv_settings_notification_light_value.text =
                                         getNotifcationLightValueFromInt(notificationLight)
 
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_notificationLightAnnual,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_notificationLightAnnual,
                                         notificationLight
                                 )
                             }
@@ -358,54 +355,54 @@
                         context.getText(R.string.event_type_one_time_event)
 
                 val isEnabled =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationOnOneTime)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationOnOneTime)!!
                 if (!isEnabled) changeEnabledStatus(holder.itemView, isEnabled)
 
                 holder.itemView.sw_settings_notifcations.isChecked = isEnabled
                 holder.itemView.sw_settings_notifcations.setOnCheckedChangeListener { _, isChecked ->
                     changeEnabledStatus(holder.itemView, isChecked)
-                    IOHandler.writeSetting(
-                            IOHandler.SharedPrefKeys.key_isNotificationOnOneTime,
+                    UserIOHandler.writeSetting(
+                            UserIOHandler.SharedPrefKeys.key_isNotificationOnOneTime,
                             isChecked
                     )
                 }
 
                 //sound switch
                 holder.itemView.sw_settings_sound.isChecked =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationSoundOnOneTime)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationSoundOnOneTime)!!
                 holder.itemView.sw_settings_sound.setOnCheckedChangeListener { _, isChecked ->
-                    IOHandler.writeSetting(
-                            IOHandler.SharedPrefKeys.key_isNotificationSoundOnOneTime,
+                    UserIOHandler.writeSetting(
+                            UserIOHandler.SharedPrefKeys.key_isNotificationSoundOnOneTime,
                             isChecked
                     )
                 }
 
                 //vibration switch
                 holder.itemView.sw_settings_vibration.isChecked =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationVibrationOnOneTime)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationVibrationOnOneTime)!!
                 holder.itemView.sw_settings_vibration.setOnCheckedChangeListener { _, isChecked ->
-                    IOHandler.writeSetting(
-                            IOHandler.SharedPrefKeys.key_isNotificationVibrationOnOneTime,
+                    UserIOHandler.writeSetting(
+                            UserIOHandler.SharedPrefKeys.key_isNotificationVibrationOnOneTime,
                             isChecked
                     )
                 }
 
                 //set notification time
                 holder.itemView.tv_settings_notificaton_time_value.text =
-                        IOHandler.getStringFromKey(IOHandler.SharedPrefKeys.key_strNotificationTimeOneTime)
+                        UserIOHandler.getStringFromKey(UserIOHandler.SharedPrefKeys.key_strNotificationTimeOneTime)
                 //set time picker dialog on click
                 holder.itemView.tv_settings_notificaton_time_value.setOnClickListener {
                     showTimePickerDialog(
                             it as TextView,
-                            IOHandler.SharedPrefKeys.key_strNotificationTimeOneTime
+                            UserIOHandler.SharedPrefKeys.key_strNotificationTimeOneTime
                     )
                 }
 
                 val notificationDateArray: BooleanArray = booleanArrayOf(
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeOneTime)!!,
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeOneTime)!!,
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeOneTime)!!,
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_eventdayOneTime)!!
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeOneTime)!!,
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeOneTime)!!,
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeOneTime)!!,
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_eventdayOneTime)!!
                 )
 
                 val constrLayoutNotificationDay =
@@ -419,20 +416,20 @@
                                 holder.itemView.tv_settings_notification_day_value.text =
                                         getNotificationDateValueStringFromBooleanArray(notificationDateArray)
 
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeOneTime,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeOneTime,
                                         notificationDateArray[0]
                                 )
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeOneTime,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeOneTime,
                                         notificationDateArray[1]
                                 )
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeOneTime,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeOneTime,
                                         notificationDateArray[2]
                                 )
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_isRemindedDay_eventdayOneTime,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_isRemindedDay_eventdayOneTime,
                                         notificationDateArray[3]
                                 )
                             }
@@ -451,7 +448,7 @@
                 }
 
                 var notificationLight =
-                        IOHandler.getIntFromKey(IOHandler.SharedPrefKeys.key_notificationLightOneTime)!!
+                        UserIOHandler.getIntFromKey(UserIOHandler.SharedPrefKeys.key_notificationLightOneTime)!!
                 val constrLayoutNotificationLight =
                         holder.itemView.findViewById<ConstraintLayout>(R.id.constraint_layout_settings_notification_light)
                 //show checkbox dialog on click
@@ -463,8 +460,8 @@
                                 holder.itemView.tv_settings_notification_light_value.text =
                                         getNotifcationLightValueFromInt(notificationLight)
 
-                                IOHandler.writeSetting(
-                                        IOHandler.SharedPrefKeys.key_notificationLightOneTime,
+                                UserIOHandler.writeSetting(
+                                        UserIOHandler.SharedPrefKeys.key_notificationLightOneTime,
                                         notificationLight
                                 )
                             }
@@ -557,7 +554,7 @@
                     val timeString = EventDate.parseTimeToString(cal.time)
 
                     tv_notification_time.text = timeString
-                    IOHandler.writeSetting(
+                    UserIOHandler.writeSetting(
                             notifcationTimeKey,
                             timeString
                     )
@@ -581,8 +578,8 @@
         dialogBuilder.setPositiveButton(R.string.yes) { _, _ ->
             Toast.makeText(context, R.string.delete_all_dialog_confirmation, Toast.LENGTH_LONG)
                     .show()
-            EventHandler.deleteAllEntriesAndImages(context, true)
-            (context as MainActivity).addMonthDivider()
+            UserHandler.deleteAllEntriesAndImages(context, true)
+            (context as UsersActivity).addMonthDivider()
             (context).supportFragmentManager.popBackStack()
         }
         dialogBuilder.setNegativeButton(R.string.no) { dialog, _ -> dialog.dismiss() }
@@ -641,14 +638,14 @@
         ) {
             // Permission is not granted
             //ask user for permission
-            (context as MainActivity).requestPermissions(
+            (context as UsersActivity).requestPermissions(
                     arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),
                     6001
             )
             return
         }
 
-        (context as MainActivity).writeDataToExternal()
+        (context as UsersActivity).writeDataToExternal()
     }
 
     private fun importData() {
@@ -663,13 +660,13 @@
             // Permission is not granted
             //ask user for permission
             ActivityCompat.requestPermissions(
-                    context as MainActivity,
+                    context as UsersActivity,
                     arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE),
                     6002
             )
             return
         }
 
-        (context as MainActivity).importDataFromExternal()
+        (context as UsersActivity).importDataFromExternal()
     }
 }
\ No newline at end of file
Index: app/src/main/java/bobrchess/of/by/belaruschess/presenter/impl/SearchTournamentPresenterImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/presenter/impl/SearchTournamentPresenterImpl.java	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/presenter/impl/SearchTournamentPresenterImpl.java	(date 1582220303495)
@@ -18,7 +18,7 @@
 import bobrchess.of.by.belaruschess.presenter.callback.CallBackSearchTournament;
 import bobrchess.of.by.belaruschess.util.Util;
 import bobrchess.of.by.belaruschess.view.activity.SearchTournamentContractView;
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity;
+import bobrchess.of.by.belaruschess.view.activity.impl.UsersActivity;
 import butterknife.BindView;
 
 /**
Index: app/src/main/java/bobrchess/of/by/belaruschess/model/EventDate.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/model/EventDate.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/model/EventDate.kt	(date 1582220303804)
@@ -1,6 +1,5 @@
 package bobrchess.of.by.belaruschess.model
 
-import bobrchess.of.by.belaruschess.handler.IOHandler
 import com.procrastimax.birthdaybuddy.models.MonthDivider
 import com.procrastimax.birthdaybuddy.models.SortIdentifier
 import java.math.RoundingMode
@@ -360,7 +359,7 @@
         @JvmStatic
         fun <T> getStringFromValue(identifier: SortIdentifier, value: T): String {
             return if (value != null) {
-                "${IOHandler.tournamentDivider_properties}$identifier${IOHandler.tournamentDivider_values}$value"
+                "${UserIOHandler.tournamentDivider_properties}$identifier${UserIOHandler.tournamentDivider_values}$value"
 
             } else ""
         }
Index: app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowUserEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowUserEvent.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/fragments/ShowUserEvent.kt	(date 1582220302740)
@@ -12,14 +12,10 @@
 import android.widget.ImageView
 import android.widget.TextView
 import bobrchess.of.by.belaruschess.R
-import bobrchess.of.by.belaruschess.handler.BitmapHandler
-import bobrchess.of.by.belaruschess.handler.EventHandler
 import bobrchess.of.by.belaruschess.model.EventDate
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import com.procrastimax.birthdaybuddy.fragments.ShowEventFragment
 import com.procrastimax.birthdaybuddy.fragments.TournamentInstanceFragment
 import com.procrastimax.birthdaybuddy.models.EventTournament
-import kotlinx.android.synthetic.main.activity_main.*
 import kotlinx.android.synthetic.main.fragment_show_tournament_event.*
 import java.text.DateFormat
 
@@ -35,7 +31,7 @@
         inflater: LayoutInflater, container: ViewGroup?,
         savedInstanceState: Bundle?
     ): View? {
-        (context as MainActivity).unlockAppBar()
+        (context as UsersActivity).unlockAppBar()
         return inflater.inflate(R.layout.fragment_show_tournament_event, container, false)
     }
 
@@ -44,15 +40,15 @@
      */
 
     override fun updateUI() {
-        (context as MainActivity).scrollable_toolbar.isTitleEnabled = true
-        EventHandler.getEventToEventIndex(eventID)?.let { tournamentEvent ->
+        (context as UsersActivity).scrollable_toolbar.isTitleEnabled = true
+        UserHandler.getEventToEventIndex(eventID)?.let { tournamentEvent ->
             if (tournamentEvent is EventTournament) {
                     this.tournament_name.text = tournamentEvent.name
                     this.tournament_short_description.visibility = TextView.VISIBLE
                     this.tournament_short_description.text = tournamentEvent.shortDescription
 
                 var scrollRange = -1
-                (context as MainActivity).app_bar.addOnOffsetChangedListener(AppBarLayout.OnOffsetChangedListener { appbarLayout, verticalOffset ->
+                (context as UsersActivity).app_bar.addOnOffsetChangedListener(AppBarLayout.OnOffsetChangedListener { appbarLayout, verticalOffset ->
                     if (scrollRange == -1) {
                         scrollRange = appbarLayout.totalScrollRange
                     }
@@ -67,14 +63,14 @@
 
                 //only set expanded title color to white, when background is not white, background is white when no avatar image is set
                 if (tournamentEvent.imageUri != null) {
-                    (context as MainActivity).scrollable_toolbar.setExpandedTitleColor(
+                    (context as UsersActivity).scrollable_toolbar.setExpandedTitleColor(
                         ContextCompat.getColor(
                             context!!,
                             R.color.white
                         )
                     )
                 } else {
-                    (context as MainActivity).scrollable_toolbar.setExpandedTitleColor(
+                    (context as UsersActivity).scrollable_toolbar.setExpandedTitleColor(
                         ContextCompat.getColor(
                             context!!,
                             R.color.darkGrey
@@ -144,31 +140,31 @@
     }
 
     private fun updateAvatarImage() {
-        if (this.iv_avatar != null && this.eventID >= 0 && (context as MainActivity).collapsable_toolbar_iv != null) {
-            val bitmap = BitmapHandler.getBitmapFromFile(context!!, this.eventID)
+        if (this.iv_avatar != null && this.eventID >= 0 && (context as UsersActivity).collapsable_toolbar_iv != null) {
+            val bitmap = UserBitmapHandler.getBitmapFromFile(context!!, this.eventID)
             setBitmapToToolbar(bitmap)
         }
     }
 
     private fun setBitmapToToolbar(bitmap: Bitmap?) {
-        (context as MainActivity).collapsable_toolbar_iv.visibility = ImageView.VISIBLE
+        (context as UsersActivity).collapsable_toolbar_iv.visibility = ImageView.VISIBLE
         if (bitmap != null) {
-            (context as MainActivity).collapsable_toolbar_iv.setImageBitmap(bitmap)
-            (context as MainActivity).collapsable_toolbar_iv.scaleType =
+            (context as UsersActivity).collapsable_toolbar_iv.setImageBitmap(bitmap)
+            (context as UsersActivity).collapsable_toolbar_iv.scaleType =
                 ImageView.ScaleType.CENTER_CROP
-            (context as MainActivity).app_bar.setExpanded(true, true)
+            (context as UsersActivity).app_bar.setExpanded(true, true)
         } else {
-            (context as MainActivity).app_bar.setExpanded(false, false)
-            (context as MainActivity).collapsable_toolbar_iv.scaleType =
+            (context as UsersActivity).app_bar.setExpanded(false, false)
+            (context as UsersActivity).collapsable_toolbar_iv.scaleType =
                 ImageView.ScaleType.FIT_CENTER
-            (context as MainActivity).collapsable_toolbar_iv.setImageResource(R.drawable.ic_birthday_person)
+            (context as UsersActivity).collapsable_toolbar_iv.setImageResource(R.drawable.ic_birthday_person)
         }
     }
 
     private fun closeExpandableToolbar() {
         setToolbarTitle(context!!.resources.getString(R.string.app_name))
-        (context as MainActivity).collapsable_toolbar_iv.visibility = ImageView.GONE
-        (context as MainActivity).lockAppbar()
+        (context as UsersActivity).collapsable_toolbar_iv.visibility = ImageView.GONE
+        (context as UsersActivity).lockAppbar()
     }
 
     /**
@@ -176,7 +172,7 @@
      * It provides a simple intent to share data as plain text in other apps
      */
     override fun shareEvent() {
-        EventHandler.getEventToEventIndex(eventID)?.let { birthday ->
+        UserHandler.getEventToEventIndex(eventID)?.let { birthday ->
             if (birthday is EventTournament) {
                 val intent = Intent(Intent.ACTION_SEND)
                 intent.type = "text/plain"
@@ -256,10 +252,10 @@
         val bundle = Bundle()
         //do this in more adaptable way
         bundle.putInt(
-            MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
+            UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID,
             eventID
         )
-        val ft = (context as MainActivity).supportFragmentManager.beginTransaction()
+        val ft = (context as UsersActivity).supportFragmentManager.beginTransaction()
         // add arguments to fragment
         val newBirthdayFragment = TournamentInstanceFragment.newInstance()
         newBirthdayFragment.arguments = bundle
Index: app/src/main/java/bobrchess/of/by/belaruschess/handler/UserHandler.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/handler/UserHandler.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/handler/UserHandler.kt	(date 1582220303294)
@@ -11,7 +11,7 @@
 import java.util.*
 
 /**
- * EventHandler singleton object map to store all occurring EventDates (birthdays, anniversaries, etc.)
+ * UserHandler singleton object map to store all occurring EventDates (birthdays, anniversaries, etc.)
  * This is useful to compare all objects more easily, f.e. when you want to traverse all entries in event dates
  */
 object UserHandler {
@@ -60,7 +60,7 @@
         if (event is EventUser && addBitmap) {
             Thread(Runnable {
                 if (event.imageUri != null) {
-                    UserBitmapHandler.addDrawable(
+                    UserUserBitmapHandler.addDrawable(
                             event.eventID,
                             Uri.parse(event.imageUri),
                             context,
@@ -89,7 +89,7 @@
         }
 
         if (writeAfterAdd) {
-            UserIOHandler.writeEventToFile(event.eventID, event)
+            UserUserIOHandler.writeEventToFile(event.eventID, event)
         }
     }
 
@@ -126,10 +126,10 @@
                     val newEventImageUri = newEvent.imageUri
                     //remove old drawable if one exists
                     if ((oldEvent as EventUser).imageUri != null) {
-                        UserBitmapHandler.removeBitmap(oldEvent.eventID, context)
+                        UserUserBitmapHandler.removeBitmap(oldEvent.eventID, context)
                     }
-                    //force BitmapHandler to load new avatar image from gallery, in case there is already an existant bitmap
-                    UserBitmapHandler.addDrawable(
+                    //force UserBitmapHandler to load new avatar image from gallery, in case there is already an existant bitmap
+                    UserUserBitmapHandler.addDrawable(
                             ID,
                             Uri.parse(newEventImageUri),
                             context,
@@ -141,7 +141,7 @@
             this.event_list = getSortedListBy()
 
             if (writeAfterChange) {
-                UserIOHandler.writeEventToFile(ID, newEvent)
+                UserUserIOHandler.writeEventToFile(ID, newEvent)
             }
         }
     }
@@ -157,13 +157,13 @@
         getEventToEventIndex(index)?.let { event ->
 
             if (event is EventUser) {
-                UserBitmapHandler.removeBitmap(index, context)
+                UserUserBitmapHandler.removeBitmap(index, context)
             }
 
             NotificationHandler.cancelNotification(context, event)
 
             if (writeChange) {
-                UserIOHandler.removeEventFromFile(event.eventID)
+                UserUserIOHandler.removeEventFromFile(event.eventID)
             }
 
             this.event_map.remove(index)
@@ -194,9 +194,9 @@
             NotificationHandler.cancelNotification(context, it)
         }
         this.clearData()
-        UserBitmapHandler.removeAllDrawables(context)
+        UserUserBitmapHandler.removeAllDrawables(context)
         if (writeAfterAdd) {
-            UserIOHandler.clearSharedPrefEventData()
+            UserUserIOHandler.clearSharedPrefEventData()
         }
     }
 
Index: app/src/main/java/bobrchess/of/by/belaruschess/BootNotificationService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/BootNotificationService.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/BootNotificationService.kt	(date 1582220303199)
@@ -4,8 +4,6 @@
 import android.content.Intent
 import android.support.v4.app.JobIntentService
 import android.util.Log
-import bobrchess.of.by.belaruschess.handler.EventHandler
-import bobrchess.of.by.belaruschess.handler.IOHandler
 import bobrchess.of.by.belaruschess.handler.NotificationHandler
 
 class BootNotificationService : JobIntentService() {
@@ -17,9 +15,9 @@
     }
 
     override fun onHandleWork(intent: Intent) {
-        IOHandler.registerIO(this)
-        IOHandler.readAll(this)
-        NotificationHandler.scheduleListEventNotifications(this, EventHandler.getList())
+        UserIOHandler.registerIO(this)
+        UserIOHandler.readAll(this)
+        NotificationHandler.scheduleListEventNotifications(this, UserHandler.getList())
         Log.i("BootNotificationService", "notifications added")
     }
 }
\ No newline at end of file
Index: app/src/main/res/layout/content_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/content_main.xml	(date 1582219169000)
+++ app/src/main/res/layout/content_main.xml	(date 1582220304240)
@@ -5,7 +5,7 @@
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     app:layout_behavior="@string/appbar_scrolling_view_behavior"
-    tools:context=".view.activity.impl.MainActivity"
+    tools:context=".view.activity.impl.UsersActivity"
     tools:showIn="@layout/activity_main">
 
     <FrameLayout
Index: app/src/main/java/bobrchess/of/by/belaruschess/model/OneTimeEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/model/OneTimeEvent.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/model/OneTimeEvent.kt	(date 1582220303142)
@@ -1,7 +1,6 @@
 package com.procrastimax.birthdaybuddy.models
 
 import android.util.Log
-import bobrchess.of.by.belaruschess.handler.IOHandler
 import bobrchess.of.by.belaruschess.model.EventDate
 import java.text.DateFormat
 import java.util.*
@@ -69,9 +68,9 @@
     }
 
     override fun toString(): String {
-        return "$Name${IOHandler.tournamentDivider_properties}" +
-                "${Identifier.Name}${IOHandler.tournamentDivider_values}${this.name}" +
-                "${IOHandler.tournamentDivider_properties}${Identifier.Date}${IOHandler.tournamentDivider_values}${parseDateToString(
+        return "$Name${UserIOHandler.tournamentDivider_properties}" +
+                "${Identifier.Name}${UserIOHandler.tournamentDivider_values}${this.name}" +
+                "${UserIOHandler.tournamentDivider_properties}${Identifier.Date}${UserIOHandler.tournamentDivider_values}${parseDateToString(
                     this.eventDate,
                     DateFormat.DEFAULT,
                     Locale.GERMAN
Index: app/src/main/java/bobrchess/of/by/belaruschess/model/SortIdentifier.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/model/SortIdentifier.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/model/SortIdentifier.kt	(date 1582220302508)
@@ -2,7 +2,7 @@
 
 /**
  * SortIdentifier is an interface which is used by enum classes from EventDay and its inherited subclasses
- * This Identifier is used to know to which attribute the event map has to be sorted (see EventHandler)
+ * This Identifier is used to know to which attribute the event map has to be sorted (see UserHandler)
  */
 interface SortIdentifier {
     fun Identifier(): Int
Index: app/src/main/java/bobrchess/of/by/belaruschess/model/EventTournament.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/model/EventTournament.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/model/EventTournament.kt	(date 1582220302655)
@@ -1,7 +1,5 @@
 package com.procrastimax.birthdaybuddy.models
 
-import bobrchess.of.by.belaruschess.dto.UserDTO
-import bobrchess.of.by.belaruschess.handler.IOHandler
 import bobrchess.of.by.belaruschess.model.EventDate
 import java.text.DateFormat
 import java.util.*
@@ -96,13 +94,13 @@
      * @return String
      */
     override fun toString(): String {
-        return "$Name${IOHandler.tournamentDivider_properties}${Identifier.Name}${IOHandler.tournamentDivider_values}${this.name}${IOHandler.tournamentDivider_properties}" +
-                "${Identifier.StartDate}${IOHandler.tournamentDivider_values}${parseDateToString(
+        return "$Name${UserIOHandler.tournamentDivider_properties}${Identifier.Name}${UserIOHandler.tournamentDivider_values}${this.name}${UserIOHandler.tournamentDivider_properties}" +
+                "${Identifier.StartDate}${UserIOHandler.tournamentDivider_values}${parseDateToString(
                         this.eventDate,
                         DateFormat.DEFAULT,
                         Locale.GERMAN
-                )}${IOHandler.tournamentDivider_properties}" +
-                "${Identifier.FinishDate}${IOHandler.tournamentDivider_values}${parseDateToString(
+                )}${UserIOHandler.tournamentDivider_properties}" +
+                "${Identifier.FinishDate}${UserIOHandler.tournamentDivider_values}${parseDateToString(
                         this.eventDate,
                         DateFormat.DEFAULT,
                         Locale.GERMAN//todo why??? выше то же
@@ -123,13 +121,13 @@
      * @return String
      */
     fun toStringWithoutImage(): String {
-        return "$Name${IOHandler.tournamentDivider_properties}${Identifier.Name}${IOHandler.tournamentDivider_values}${this.name}${IOHandler.tournamentDivider_properties}" +
-                "${Identifier.StartDate}${IOHandler.tournamentDivider_values}${parseDateToString(
+        return "$Name${UserIOHandler.tournamentDivider_properties}${Identifier.Name}${UserIOHandler.tournamentDivider_values}${this.name}${UserIOHandler.tournamentDivider_properties}" +
+                "${Identifier.StartDate}${UserIOHandler.tournamentDivider_values}${parseDateToString(
                         this.eventDate,
                         DateFormat.DEFAULT,
                         Locale.GERMAN
-                )}${IOHandler.tournamentDivider_properties}" +
-                "${Identifier.FinishDate}${IOHandler.tournamentDivider_values}${parseDateToString(
+                )}${UserIOHandler.tournamentDivider_properties}" +
+                "${Identifier.FinishDate}${UserIOHandler.tournamentDivider_values}${parseDateToString(
                         this.finishDate!!,
                         DateFormat.DEFAULT,
                         Locale.GERMAN//todo why??? выше то же
Index: app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/UsersActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/UsersActivity.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/view/activity/impl/UsersActivity.kt	(date 1582220302858)
@@ -14,9 +14,9 @@
 import bobrchess.of.by.belaruschess.R
 import bobrchess.of.by.belaruschess.dto.UserDTO
 import bobrchess.of.by.belaruschess.fragments.ShowUserEvent
-import bobrchess.of.by.belaruschess.handler.UserBitmapHandler
+import bobrchess.of.by.belaruschess.handler.UserUserBitmapHandler
 import bobrchess.of.by.belaruschess.handler.UserHandler
-import bobrchess.of.by.belaruschess.handler.UserIOHandler
+import bobrchess.of.by.belaruschess.handler.UserUserIOHandler
 import bobrchess.of.by.belaruschess.model.EventDate
 import bobrchess.of.by.belaruschess.presenter.SearchUserPresenter
 import bobrchess.of.by.belaruschess.presenter.impl.SearchUserPresenterImpl
@@ -50,17 +50,17 @@
         searchUserPresenter!!.viewIsReady()
 
         UserHandler.clearData()
-        UserIOHandler.registerIO(this)
+        UserUserIOHandler.registerIO(this)
         lockAppbar()
 
 
-        if (!UserIOHandler.isFirstStart()) {
+        if (!UserUserIOHandler.isFirstStart()) {
             //loadUsers()
             addMonthDivider()
             addTestUser()
         } else {
             //on first start write standard settings to shared prefs
-            UserIOHandler.initializeAllSettings()
+            UserUserIOHandler.initializeAllSettings()
             addMonthDivider()
             addTestUser()
         }
@@ -280,7 +280,7 @@
         //start loading bitmap drawables in other thread to not block ui
         Thread(Runnable
         {
-            UserBitmapHandler.loadAllBitmaps(this)
+            UserUserBitmapHandler.loadAllBitmaps(this)
             runOnUiThread {
                 if (recyclerView != null) {
                     recyclerView.adapter!!.notifyDataSetChanged()
@@ -302,7 +302,7 @@
 
 
     override fun showUsers(users: List<UserDTO>) {
-       // IOHandler.clearSharedPrefEventData()
+       // UserIOHandler.clearSharedPrefEventData()
         users.forEach {
             val event = EventUser(it.id!!.toInt(), EventDate.parseStringToDate(transformDate(it.birthday)!!, DateFormat.DEFAULT, Locale.GERMAN), it.name!!)
             event.name = it.name!!
Index: app/src/main/java/bobrchess/of/by/belaruschess/model/MonthDivider.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/model/MonthDivider.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/model/MonthDivider.kt	(date 1582220303857)
@@ -1,6 +1,5 @@
 package com.procrastimax.birthdaybuddy.models
 
-import bobrchess.of.by.belaruschess.handler.IOHandler
 import bobrchess.of.by.belaruschess.model.EventDate
 import java.text.DateFormat
 import java.util.*
@@ -20,11 +19,11 @@
     }
 
     override fun toString(): String {
-        return "$Name${IOHandler.tournamentDivider_properties}${Identifier.Date}${IOHandler.tournamentDivider_values}${parseDateToString(
+        return "$Name${UserIOHandler.tournamentDivider_properties}${Identifier.Date}${UserIOHandler.tournamentDivider_values}${parseDateToString(
                 this.eventDate,
                 DateFormat.DEFAULT,
                 Locale.GERMAN
-        )}${IOHandler.tournamentDivider_properties}${Identifier.MonthName}${IOHandler.tournamentDivider_values}$month_name"
+        )}${UserIOHandler.tournamentDivider_properties}${Identifier.MonthName}${UserIOHandler.tournamentDivider_values}$month_name"
     }
 
     companion object {
Index: app/src/main/java/bobrchess/of/by/belaruschess/handler/NotificationHandler.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/handler/NotificationHandler.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/handler/NotificationHandler.kt	(date 1582220303545)
@@ -6,9 +6,7 @@
 import android.content.Intent
 import bobrchess.of.by.belaruschess.AlarmReceiver
 import bobrchess.of.by.belaruschess.model.EventDate
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import com.procrastimax.birthdaybuddy.models.*
-import java.time.LocalDateTime
 import java.util.*
 
 object NotificationHandler {
@@ -31,18 +29,18 @@
                 is EventTournament -> {
                     //do nothing when notifications for this are disabled
                     val isBirthdayReminded =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationOnBirthday)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationOnBirthday)
                     if (isBirthdayReminded == false) return
 
                     //get reminding times
                     val isMonthReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeBirthday)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeBirthday)
                     val isWeekReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeBirthday)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeBirthday)
                     val isDayReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeBirthday)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeBirthday)
                     val isEventDayReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_eventdayBirthday)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_eventdayBirthday)
 
                     //set reminder for reminding times
                     if (isMonthReminder == true) {
@@ -68,17 +66,17 @@
                 /*is AnnualEvent -> {
                     //do nothing when notifications for this are disabled
                     val isAnnualReminded =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationOnAnnual)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationOnAnnual)
                     if (isAnnualReminded == false) return
 
                     val isMonthReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeAnnual)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeAnnual)
                     val isWeekReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeAnnual)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeAnnual)
                     val isDayReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeAnnual)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeAnnual)
                     val isEventDayReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_eventdayAnnual)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_eventdayAnnual)
 
                     //set reminder for reminding times
                     if (isMonthReminder == true) {
@@ -104,18 +102,18 @@
                 is OneTimeEvent -> {
                     //do nothing when notifications for this are disabled
                     val isOneTimeReminded =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationOnOneTime)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationOnOneTime)
                     if (isOneTimeReminded == false) return
 
                     //get reminding times
                     val isMonthReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeOneTime)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_month_beforeOneTime)
                     val isWeekReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeOneTime)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_week_beforeOneTime)
                     val isDayReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeOneTime)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_day_beforeOneTime)
                     val isEventDayReminder =
-                        IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isRemindedDay_eventdayOneTime)
+                        UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isRemindedDay_eventdayOneTime)
 
                     //set reminder for reminding times
                     if (isMonthReminder == true) {
@@ -153,12 +151,12 @@
     ) {
         val intent = Intent(context, AlarmReceiver::class.java)
         val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
-        intent.putExtra(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTSTRING, event.toString())
+        intent.putExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTSTRING, event.toString())
         intent.putExtra(
-            MainActivity.FRAGMENT_EXTRA_TITLE_NOTIFICATIONID,
+            UsersActivity.FRAGMENT_EXTRA_TITLE_NOTIFICATIONID,
             getRequestCode(event, reminderStart)
         )
-        intent.putExtra(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID, event.eventID)
+        intent.putExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID, event.eventID)
         val alarmIntent =
             PendingIntent.getBroadcast(context, getRequestCode(event, reminderStart), intent, 0)
 
@@ -220,15 +218,15 @@
         when (event) {
             is EventTournament -> {
                 notificationTime =
-                    IOHandler.getStringFromKey(IOHandler.SharedPrefKeys.key_strNotificationTimeBirthday)
+                    UserIOHandler.getStringFromKey(UserIOHandler.SharedPrefKeys.key_strNotificationTimeBirthday)
             }
             /*is AnnualEvent -> {
                 notificationTime =
-                    IOHandler.getStringFromKey(IOHandler.SharedPrefKeys.key_strNotificationTimeAnnual)
+                    UserIOHandler.getStringFromKey(UserIOHandler.SharedPrefKeys.key_strNotificationTimeAnnual)
             }*/
             is OneTimeEvent -> {
                 notificationTime =
-                    IOHandler.getStringFromKey(IOHandler.SharedPrefKeys.key_strNotificationTimeOneTime)
+                    UserIOHandler.getStringFromKey(UserIOHandler.SharedPrefKeys.key_strNotificationTimeOneTime)
             }
         }
 
Index: app/src/main/java/bobrchess/of/by/belaruschess/AlarmReceiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/bobrchess/of/by/belaruschess/AlarmReceiver.kt	(date 1582219169000)
+++ app/src/main/java/bobrchess/of/by/belaruschess/AlarmReceiver.kt	(date 1582220304213)
@@ -11,11 +11,8 @@
 import android.os.Build
 import android.support.v4.app.NotificationCompat
 import android.support.v4.content.ContextCompat
-import bobrchess.of.by.belaruschess.handler.BitmapHandler
-import bobrchess.of.by.belaruschess.handler.IOHandler
 import bobrchess.of.by.belaruschess.handler.NotificationHandler
 import bobrchess.of.by.belaruschess.model.EventDate
-import bobrchess.of.by.belaruschess.view.activity.impl.MainActivity
 import com.procrastimax.birthdaybuddy.models.EventTournament
 import com.procrastimax.birthdaybuddy.models.OneTimeEvent
 
@@ -23,17 +20,17 @@
 
     override fun onReceive(context: Context?, intent: Intent?) {
        /* if (context != null) {
-            //register IOHandler, really important, really
-            IOHandler.registerIO(context)
+            //register UserIOHandler, really important, really
+            UserIOHandler.registerIO(context)
 
             val event =
-                IOHandler.convertStringToEventDate(
+                UserIOHandler.convertStringToEventDate(
                     context,
-                    intent!!.getStringExtra(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTSTRING)
+                    intent!!.getStringExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTSTRING)
                 )
             val notificationID =
-                intent.getIntExtra(MainActivity.FRAGMENT_EXTRA_TITLE_NOTIFICATIONID, 0)
-            val eventID = intent.getIntExtra(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID, 0)
+                intent.getIntExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_NOTIFICATIONID, 0)
+            val eventID = intent.getIntExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID, 0)
             event?.eventID = eventID
 
             when (event) {
@@ -66,10 +63,10 @@
             notificationID: Int,
             eventID: Int
     ) {
-        val intent = Intent(context, MainActivity::class.java)
-        intent.putExtra(MainActivity.FRAGMENT_EXTRA_TITLE_EVENTID, eventID)
-        intent.putExtra(MainActivity.FRAGMENT_EXTRA_TITLE_TYPE, MainActivity.FRAGMENT_TYPE_SHOW)
-        intent.putExtra(MainActivity.FRAGMENT_EXTRA_TITLE_LOADALL, true)
+        val intent = Intent(context, UsersActivity::class.java)
+        intent.putExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_EVENTID, eventID)
+        intent.putExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_TYPE, UsersActivity.FRAGMENT_TYPE_SHOW)
+        intent.putExtra(UsersActivity.FRAGMENT_EXTRA_TITLE_LOADALL, true)
         intent.action = notificationID.toString()
         intent.flags = Intent.FLAG_ACTIVITY_SINGLE_TOP
         val pendingIntent: PendingIntent =
@@ -135,9 +132,9 @@
                 var bitmap: Bitmap? = null
 
                 if (event.imageUri != null) {
-                    bitmap = BitmapHandler.getBitmapFromFile(context, eventID)
+                    bitmap = UserUserBitmapHandler.getBitmapFromFile(context, eventID)
                     if (bitmap != null) {
-                        bitmap = BitmapHandler.getCircularBitmap(bitmap, context.resources)
+                        bitmap = UserBitmapHandler.getCircularBitmap(bitmap, context.resources)
                     }
                 }
 
@@ -180,11 +177,11 @@
                     builder.setLargeIcon(bitmap)
                 }
 
-                if (!IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationVibrationOnBirthday)!!) {
+                if (!UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationVibrationOnBirthday)!!) {
                     defaults -= Notification.DEFAULT_VIBRATE
                 }
 
-                if (!IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationSoundOnBirthday)!!) {
+                if (!UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationSoundOnBirthday)!!) {
                     defaults -= Notification.DEFAULT_SOUND
                 }
 
@@ -223,11 +220,11 @@
                     .setSubText(context.getText(R.string.event_type_annual_event))
                     .setAutoCancel(true)
 
-                if (!IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationVibrationOnAnnual)!!) {
+                if (!UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationVibrationOnAnnual)!!) {
                     defaults -= Notification.DEFAULT_VIBRATE
                 }
 
-                if (!IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationSoundOnAnnual)!!) {
+                if (!UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationSoundOnAnnual)!!) {
                     defaults -= Notification.DEFAULT_SOUND
                 }
 
@@ -267,11 +264,11 @@
                     .setSubText(context.getText(R.string.event_type_one_time_event))
                     .setAutoCancel(true)
 
-                if (!IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationVibrationOnOneTime)!!) {
+                if (!UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationVibrationOnOneTime)!!) {
                     defaults -= Notification.DEFAULT_VIBRATE
                 }
 
-                if (!IOHandler.getBooleanFromKey(IOHandler.SharedPrefKeys.key_isNotificationSoundOnOneTime)!!) {
+                if (!UserIOHandler.getBooleanFromKey(UserIOHandler.SharedPrefKeys.key_isNotificationSoundOnOneTime)!!) {
                     defaults -= Notification.DEFAULT_SOUND
                 }
 
@@ -402,17 +399,17 @@
         when (event) {
             is EventTournament -> {
                 val lightValue =
-                    IOHandler.getIntFromKey(IOHandler.SharedPrefKeys.key_notificationLightBirthday)!!
+                    UserIOHandler.getIntFromKey(UserIOHandler.SharedPrefKeys.key_notificationLightBirthday)!!
                 return getLightARGBFromColorValue(lightValue, context)
             }
             /*is AnnualEvent -> {
                 val lightValue =
-                    IOHandler.getIntFromKey(IOHandler.SharedPrefKeys.key_notificationLightAnnual)!!
+                    UserIOHandler.getIntFromKey(UserIOHandler.SharedPrefKeys.key_notificationLightAnnual)!!
                 return getLightARGBFromColorValue(lightValue, context)
             }*/
             is OneTimeEvent -> {
                 val lightValue =
-                    IOHandler.getIntFromKey(IOHandler.SharedPrefKeys.key_notificationLightOneTime)!!
+                    UserIOHandler.getIntFromKey(UserIOHandler.SharedPrefKeys.key_notificationLightOneTime)!!
                 return getLightARGBFromColorValue(lightValue, context)
             }
             else -> {
